#+TITLE: TMP16A4's Emacs Config
#+DATE: 6/19/2023
#+AUTHOR: The Programming M16A4
#+PROPERTY: header-args:emacs-lisp :tangle yes :tangle init.el

*  _______ _____  __  __ __   __        _  _   _       ______                             _____             __ _       
* |__   __|  __ \|  \/  /_ | / /    /\ | || | ( )     |  ____|                           / ____|           / _(_)      
*    | |  | |__) | \  / || |/ /_   /  \| || |_|/ ___  | |__   _ __ ___   __ _  ___ ___  | |     ___  _ __ | |_ _  __ _ 
*    | |  |  ___/| |\/| || | '_ \ / /\ \__   _| / __| |  __| | '_ ` _ \ / _` |/ __/ __| | |    / _ \| '_ \|  _| |/ _` |
*    | |  | |    | |  | || | (_) / ____ \ | |   \__ \ | |____| | | | | | (_| | (__\__ \ | |___| (_) | | | | | | | (_| |
*    |_|  |_|    |_|  |_||_|\___/_/    \_\|_|   |___/ |______|_| |_| |_|\__,_|\___|___/  \_____\___/|_| |_|_| |_|\__, |
*                                                                                                                 __/ |
*                                                                                                                |___/ 

GitHub: https://github.com/The-Tech-Lord/dotfiles

* Package Manager
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

* Emacs Settings
** Tabs
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode t)
#+END_SRC

** Line Number Column
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
(global-display-line-numbers-mode)
#+END_SRC

** Disabled
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)                     ;; Startup Screen
(setq make-backup-files nil)
(setq backward-delete-char-untabify-method nil)
#+END_SRC

** GUI
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-line t)
(global-visual-line-mode t)
(windmove-default-keybindings)                             ;; Adds Window Switching Keybindings
(add-hook 'window-setup-hook 'toggle-frame-maximized t)    ;; Maximizes Window
#+END_SRC

* Mode Settings
** CC Mode
*** C
#+BEGIN_SRC emacs-lisp
(defun c-mode-settings()
  (setq c-default-style "linux")
  (setq c-basic-offset 4)
  )
#+END_SRC

* Org Mode
** ToDo
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
		'((sequence "TODO" "IN-PROGRESS" "|" "DONE")
		  (sequence "BUG" "|" "FIXED")))
#+END_SRC

** SRC Block
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t
    org-edit-src-content-indentation '0)
#+END_SRC

* Key Bindings
** Global
*** General
**** Unbinded
***** Killing
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-w"))    ;; kill-region
(global-unset-key (kbd "S-<delete>"))    ;; kill-region
(global-unset-key (kbd "M-w"))    ;; kill-ring-save
(global-unset-key (kbd "C-<insert>"))    ;; kill-ring-save
(global-unset-key (kbd "C-<insertchar>"))    ;; kill-ring-save
(global-unset-key (kbd "C-M-w"))    ;; append-next-kill
(global-unset-key (kbd "C-S-<backspace>"))    ;; kill-whole-line

(global-unset-key (kbd "ESC C-<delete>"))    ;; backward-kill-sexp
(global-unset-key (kbd "ESC C-<backspace>"))    ;; backward-kill-sexp

(global-unset-key (kbd "C-M-k"))    ;; kill-sexp
#+END_SRC

****** Words
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-d"))    ;; kill-word
(global-unset-key (kbd "C-<delete>"))    ;; kill-word
(global-unset-key (kbd "M-DEL"))    ;; backward-kill-word
(global-unset-key (kbd "C-<backspace>"))    ;; backward-kill-word
#+END_SRC

****** Sentences
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-k"))    ;; kill-sentence
(global-unset-key (kbd "C-DEL"))    ;; backward-kill-sentece
(global-unset-key (kbd "C-x DEL"))    ;; backward-kill-sentence
#+END_SRC

***** Not-Really Killing
****** Yank
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-y"))    ;; yank
(global-unset-key (kbd "S-<insert>"))    ;; yank
(global-unset-key (kbd "S-<insertchar>"))    ;; yank
#+END_SRC

****** Undo
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-_"))    ;; undo
(global-unset-key (kbd "C-x u"))    ;; undo
(global-unset-key (kbd "C-M-_"))    ;; undo-redo
#+END_SRC

***** Deletion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-d"))    ;; delete-char
(global-unset-key (kbd "M-\\"))    ;; delete-horizontal-space
(global-unset-key (kbd "M-^"))    ;; delete-indentation
#+END_SRC

***** Marking
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-@"))    ;; mark-word
(global-unset-key (kbd "C-x C-p"))    ;; mark-page
(global-unset-key (kbd "C-M-h"))    ;; mark-defun
(global-unset-key (kbd "C-x h"))    ;; mark-whole-buffer
(global-unset-key (kbd "C-x C-@"))    ;; pop-global-mark
(global-unset-key (kbd "C-x C-SPC"))    ;; pop-global-mark
(global-unset-key (kbd "M-,"))    ;; xref-pop-marker-stack
#+END_SRC

***** Counting
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x l"))    ;; count-lines-page
(global-unset-key (kbd "M-="))    ;; count-words-region
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M--"))    ;; negative-argument
(global-unset-key (kbd "C-M--"))    ;; negative-argument
(global-unset-key (kbd "C-x C-d"))    ;; list-directory
(global-unset-key (kbd "M-;"))    ;; comment-dwim
(global-unset-key (kbd "C-M-c"))    ;; exit-recursive-edit
(global-unset-key (kbd "C-M-<mouse-1>"))    ;; mouse-set-point
#+END_SRC

**** Binded
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-.") 'kill-region)
(global-set-key (kbd "C-;") 'yank)
(global-set-key (kbd "M-'") 'kill-ring-save)
#+END_SRC

*** Searching
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-f"))    ;; find-file-read-only
(global-unset-key (kbd "C-x C-r"))    ;; find-file-read-only
(global-unset-key (kbd "M-."))    ;; xref-find-definitions
(global-unset-key (kbd "M-?"))    ;; xref-find-references
(global-unset-key (kbd "C-M-."))    ;; xref-find-apropos

(global-unset-key (kbd "C-M-r"))    ;; isearch-backward-regexp
(global-unset-key (kbd "C-M-s"))    ;; isearch-forward-regexp

(global-unset-key (kbd "M-z"))    ;; zap-to-char
(global-unset-key (kbd "C-M-%"))    ;; query-replace-regexp
(global-unset-key (kbd "M-%"))    ;; query-replace

(global-unset-key (kbd "M-$"))    ;; ispell-word
(global-unset-key (kbd "C-x C-v"))    ;; find-alternate-file
#+END_SRC

*** Text Manipulation
**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-q"))    ;; fill-paragraph
(global-unset-key (kbd "M-("))    ;; insert-parentheses
(global-unset-key (kbd "C-M-i"))    ;; complete-symbol
(global-unset-key (kbd "C-M-j"))    ;; default-indent-new-line
(global-unset-key (kbd "C-M-o"))    ;; split-line

(global-unset-key (kbd "C-x i"))    ;; insert-file
(global-unset-key (kbd "M-)"))    ;; move-past-close-and-reindent
(global-unset-key (kbd "C-x \\"))    ;; activate-transient-input-method
#+END_SRC

***** Transpose
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-t"))    ;; transpose-key
(global-unset-key (kbd "M-t"))    ;; tranpose-words
(global-unset-key (kbd "C-x C-t"))    ;; transpose-lines
#+END_SRC

***** Cases
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-l"))    ;; downcase-word
(global-unset-key (kbd "M-u"))    ;; upcase-word
(global-unset-key (kbd "M-c"))    ;; capitalize-word
(global-unset-key (kbd "C-x C-l"))    ;; downcase-region
(global-unset-key (kbd "C-x C-u"))    ;; upcase-region
#+END_SRC

***** Whitespace
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-i"))    ;; tab-to-tab-stop
(global-unset-key (kbd "M-j"))    ;; default-indent-new-line
(global-unset-key (kbd "M-SPC"))    ;; just-one-space
(global-unset-key (kbd "C-x TAB"))    ;; indent-rigidly
(global-unset-key (kbd "C-M-\\"))    ;; indent-region
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Movement
**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-f"))    ;; forward-char
(global-unset-key (kbd "C-b"))    ;; backward-char

(global-unset-key (kbd "M-f"))    ;; forward-word
(global-unset-key (kbd "M-b"))    ;; backward-word
(global-unset-key (kbd "ESC <left>"))    ;; backward-word

(global-unset-key (kbd "M-a"))    ;; backward-sentence
(global-unset-key (kbd "M-e"))    ;; forward-sentence

(global-unset-key (kbd "C-<up>"))    ;; backward-paragraph
(global-unset-key (kbd "C-<down>"))    ;; forward-paragraph
#+END_SRC

***** Whitespace
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-m"))    ;; back-to-indentation
#+END_SRC

***** Scrolling
****** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-n"))    ;; next-line
(global-unset-key (kbd "C-p"))    ;; previous-line

(global-unset-key (kbd "M-<"))    ;; beginning-of-buffer
(global-unset-key (kbd "C-<home>"))    ;; beginning-of-buffer
(global-unset-key (kbd "M->"))    ;; end-of-buffer
(global-unset-key (kbd "C-<end>"))    ;; end-of-buffer
(global-unset-key (kbd "C-v"))    ;; scroll-up-command
(global-unset-key (kbd "M-v"))    ;; scroll-down-command
(global-unset-key (kbd "C-M-l"))    ;; reposition-window

(global-unset-key (kbd "C-x ["))    ;; backward-page
(global-unset-key (kbd "C-x ]"))    ;; forward-page

(global-unset-key (kbd "<Scroll Lock>"))    ;; scroll-lock-mode
#+END_SRC

****** Expressions
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-f"))    ;; forward-sexp
(global-unset-key (kbd "C-M-<right>"))    ;; forward-sexp
(global-unset-key (kbd "ESC C-<left>"))    ;; backward-sexp
(global-unset-key (kbd "ESC C-<right>"))    ;; forward-sexp

(global-unset-key (kbd "C-M-b"))    ;; backward-sexp
(global-unset-key (kbd "C-M-<left>"))    ;; backward-sexp
#+END_SRC

****** Defun
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-a"))    ;; beginning-of-defun
(global-unset-key (kbd "C-M-<home>"))    ;; beginning-of-defun
(global-unset-key (kbd "ESC C-<home>"))    ;; beginning-of-defun
(global-unset-key (kbd "C-M-e"))    ;; end-of-defun
(global-unset-key (kbd "C-M-<end>"))    ;; end-of-defun
(global-unset-key (kbd "ESC C-<end>"))    ;; end-of-defun
#+END_SRC

****** Other Window
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<home>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "M-<begin>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "ESC <home>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "ESC <begin>"))    ;; beginning-of-buffer-other-window

(global-unset-key (kbd "M-<end>"))    ;; end-of-buffer-other-window
(global-unset-key (kbd "ESC <end>"))    ;; end-of-buffer-other-window

(global-unset-key (kbd "C-M-S-l"))    ;; recenter-other-window

(global-unset-key (kbd "C-M-v"))    ;; scroll-other-window
(global-unset-key (kbd "M-<next>"))    ;; scroll-other-window
(global-unset-key (kbd "ESC <next>"))    ;; scroll-other-window

(global-unset-key (kbd "C-M-S-v"))    ;; scroll-other-window-down
(global-unset-key (kbd "M-<prior>"))    ;; scroll-other-window-down
(global-unset-key (kbd "ESC <prior>"))    ;; scroll-other-window-down
#+END_SRC

****** Side Scrolling
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x <"))    ;; scroll-left
(global-unset-key (kbd "C-<next>"))    ;; scroll-left
(global-unset-key (kbd "C-x >"))    ;; scroll-right
(global-unset-key (kbd "C-<prior>"))    ;; scroll-right
#+END_SRC

****** MWheel
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<wheel-up>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-up>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-down>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-left>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-down>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-left>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-right>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-right>"))    ;; mwheel-scroll
#+END_SRC

***** Alignment
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-r"))    ;; move-to-window-line-top-bottom
(global-unset-key (kbd "C-l"))    ;; recenter-top-bottom
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-g TAB"))    ;; move-to-column
(global-unset-key (kbd "M-g c"))    ;; goto-char
(global-unset-key (kbd "M-g g"))    ;; goto-line
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<prior>") 'beginning-of-buffer)
(global-set-key (kbd "C-<next>") 'end-of-buffer)
#+END_SRC

*** Rectangles
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'rect-map)
(global-set-key (kbd "M-t") 'rect-map)
#+END_SRC

**** Unbinded
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r y"))    ;; yank-rectangle
(global-unset-key (kbd "C-x r k"))    ;; kill-rectangle
(global-unset-key (kbd "C-x r c"))    ;; clear-rectangle
(global-unset-key (kbd "C-x r d"))    ;; delete-rectangle
(global-unset-key (kbd "C-x r o"))    ;; open-rectangle
(global-unset-key (kbd "C-x r t"))    ;; string-rectangle
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r N"))    ;; rectangle-number-lines
(global-unset-key (kbd "C-x r r"))    ;; copy-rectangle-to-register
#+END_SRC

**** Binded
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t y") 'yank-rectangle)
(global-set-key (kbd "M-t k") 'kill-rectangle)
(global-set-key (kbd "M-t c") 'clear-rectangle)
(global-set-key (kbd "M-t d") 'delete-rectangle)
(global-set-key (kbd "M-t o") 'open-rectangle)
(global-set-key (kbd "M-t s") 'string-rectangle)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t n") 'rectangle-number-lines)
(global-set-key (kbd "M-t R") 'copy-rectangle-to-register)
#+END_SRC

*** Tabs
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'tabs-map)
(global-set-key (kbd "C-t") 'tabs-map)
#+END_SRC

**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t 2"))    ;; tab-new
(global-unset-key (kbd "C-x t 0"))    ;; tab-close
(global-unset-key (kbd "C-x t 1"))    ;; tab-close-other
(global-unset-key (kbd "C-x t u"))    ;; tab-undo
(global-unset-key (kbd "C-x t n"))    ;; tab-duplicate
(global-unset-key (kbd "C-x t o"))    ;; tab-next
(global-unset-key (kbd "C-x t O"))    ;; tab-previous
(global-unset-key (kbd "C-x t G"))    ;; tab-group
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t C-f"))    ;; find-file-other-tab
(global-unset-key (kbd "C-x t f"))      ;; find-file-other-tab
(global-unset-key (kbd "C-x t C-r"))    ;; find-file-read-only-other-tab
(global-unset-key (kbd "C-x t d"))      ;; dired-other-tab
#+END_SRC

***** Movement
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t N"))      ;; tab-new-to
(global-unset-key (kbd "C-x t M"))      ;; tab-move-to
(global-unset-key (kbd "C-x t RET"))    ;; tab-switch
(global-unset-key (kbd "C-x t m"))      ;; tab-move
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t t"))    ;; other-tab-prefix
(global-unset-key (kbd "C-x t b"))    ;; switch-to-buffer-other-tab
(global-unset-key (kbd "C-x t r"))    ;; tab-rename
(global-unset-key (kbd "C-x t p"))    ;; project-other-tab-command
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t t") 'tab-new)
(global-set-key (kbd "C-t w") 'tab-close)
(global-set-key (kbd "C-t W") 'tab-close-other)
(global-set-key (kbd "C-t u") 'tab-undo)
(global-set-key (kbd "C-t D") 'tab-duplicate)
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t d") 'dired-other-tab)
(global-set-key (kbd "C-t C-f") 'find-file-other-tab)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t p") 'project-other-tab-command)
#+END_SRC

*** VCS
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'vcs-map)
(global-set-key (kbd "C-v") 'vcs-map)
#+END_SRC

**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v v"))    ;; vc-next-action
(global-unset-key (kbd "C-x v +"))    ;; vc-update
(global-unset-key (kbd "C-x v P"))    ;; vc-push
(global-unset-key (kbd "C-x v i"))    ;; vc-register
(global-unset-key (kbd "C-x v d"))    ;; vc-dir

(global-unset-key (kbd "C-x v G"))    ;; vc-ignore
(global-unset-key (kbd "C-x v m"))    ;; vc-merge
(global-unset-key (kbd "C-x v u"))    ;; vc-revert
(global-unset-key (kbd "C-x v x"))    ;; vc-delete-file
#+END_SRC

***** Records
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v ="))    ;; vc-diff
(global-unset-key (kbd "C-x v D"))    ;; vc-root-diff
(global-unset-key (kbd "C-x v M D"))    ;; vc-diff-mergebase
(global-unset-key (kbd "C-x v h"))    ;; vc-region-history
(global-unset-key (kbd "C-x v l"))    ;; vc-print-log
(global-unset-key (kbd "C-x v L"))    ;; vc-print-root-log
(global-unset-key (kbd "C-x v M L"))    ;; vc-log-mergebase
(global-unset-key (kbd "C-x v O"))    ;; vc-log-outgoing
(global-unset-key (kbd "C-x v I"))    ;; vc-log-incoming

(global-unset-key (kbd "C-x v a"))    ;; vc-annotate
(global-unset-key (kbd "C-x v g"))    ;; vc-annotate

(global-unset-key (kbd "C-x v ~"))    ;; vc-revision-other-window
#+END_SRC

***** Logging
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v s"))    ;; vc-create-tag
(global-unset-key (kbd "C-x v r"))    ;; vc-retrieve-tag
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v b"))    ;; vc-switch-backend
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v v") 'vc-next-action)
(global-set-key (kbd "C-v p") 'vc-push)
(global-set-key (kbd "C-v P") 'vc-update)
(global-set-key (kbd "C-v I") 'vc-register)
(global-set-key (kbd "C-v d") 'vc-dir)

(global-set-key (kbd "C-v G") 'vc-ignore)
(global-set-key (kbd "C-v m") 'vc-merge)
(global-set-key (kbd "C-v U") 'vc-revert)
(global-set-key (kbd "C-v C-x") 'vc-delete-file)
#+END_SRC

***** Records
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v =") 'vc-diff)
(global-set-key (kbd "C-v +") 'vc-root-diff)
(global-set-key (kbd "C-v h") 'vc-region-history)
(global-set-key (kbd "C-v C-p") 'vc-print-log)
(global-set-key (kbd "C-v C-l") 'vc-print-root-log)
(global-set-key (kbd "C-v a") 'vc-annotate)
(global-set-key (kbd "C-v ~") 'vc-revision-other-window)
#+END_SRC

***** Logging
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v c") 'vc-create-tag)
(global-set-key (kbd "C-v t") 'vc-retrieve-tag)

(global-set-key (kbd "C-v l") 'vc-log-outgoing)
(global-set-key (kbd "C-v L") 'vc-log-incoming)
#+END_SRC

*** Projects
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'project-map)
(global-set-key (kbd "C-p") 'project-map)
#+END_SRC

**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p D"))    ;; project-dired
(global-unset-key (kbd "C-x p v"))    ;; project-vc-dir
(global-unset-key (kbd "C-x p b"))    ;; project-switch-to-buffer
(global-unset-key (kbd "C-x p k"))    ;; project-kill-buffers
(global-unset-key (kbd "C-x p p"))    ;; project-switch-project
#+END_SRC

***** Commands
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p s"))    ;; project-shell
(global-unset-key (kbd "C-x p !"))    ;; project-shell-command
(global-unset-key (kbd "C-x p &"))    ;; project-async-shell-command
(global-unset-key (kbd "C-x p x"))    ;; project-execute-extended-command
(global-unset-key (kbd "C-x p c"))    ;; project-compile
(global-unset-key (kbd "C-x p e"))    ;; project-eshell
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p F"))    ;; project-or-external-find-file
(global-unset-key (kbd "C-x p G"))    ;; project-or-external-find-regexp
(global-unset-key (kbd "C-x p f"))    ;; project-find-file
(global-unset-key (kbd "C-x p g"))    ;; project-find-regexp
(global-unset-key (kbd "C-x p d"))    ;; project-find-dir
(global-unset-key (kbd "C-x p r"))    ;; project-query-replace-regexp
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p d") 'project-dired)
(global-set-key (kbd "C-p D") 'project-vc-dir)
(global-set-key (kbd "C-p b") 'project-switch-to-buffer)
(global-set-key (kbd "C-p C-k") 'project-kill-buffers)
(global-set-key (kbd "C-p p") 'project-switch-project)
#+END_SRC

***** Commands
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p s") 'project-shell)
(global-set-key (kbd "C-p S") 'project-shell-command)
(global-set-key (kbd "C-p C-s") 'project-async-shell-command)
(global-set-key (kbd "C-p c") 'project-compile)
(global-set-key (kbd "C-p e") 'project-eshell)
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p F") 'project-or-external-find-file)
(global-set-key (kbd "C-p G") 'project-or-external-find-regexp)
(global-set-key (kbd "C-p C-f") 'project-find-file)
(global-set-key (kbd "C-p g") 'project-find-regexp)
(global-set-key (kbd "C-p d") 'project-find-dir)
(global-set-key (kbd "C-p r") 'project-query-replace-regexp)
#+END_SRC

*** Registers
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'register-map)
(global-set-key (kbd "M-r") 'register-map)
#+END_SRC

**** Unbinded
***** Manipulation
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r C-@"))    ;; point-to-register
(global-unset-key (kbd "C-x r C-SPC"))    ;; point-to-register
(global-unset-key (kbd "C-x r SPC"))    ;; point-to-register
(global-unset-key (kbd "C-x r n"))    ;; number-to-register

(global-unset-key (kbd "C-x r s"))    ;; copy-to-register
(global-unset-key (kbd "C-x r x"))    ;; copy-to-register
(global-unset-key (kbd "C-x r +"))    ;; increment-register
#+END_SRC

***** Utilization
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r g"))    ;; insert-register
(global-unset-key (kbd "C-x r i"))    ;; insert-register
(global-unset-key (kbd "C-x r j"))    ;; jump-to-register
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r f"))    ;; frameset-to-register
(global-unset-key (kbd "C-x r w"))    ;; window-configuration-to-register
(global-unset-key (kbd "C-x r ESC"))    ;; Prefix Command
#+END_SRC

**** Binded
***** Manipulation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-r n") 'number-to-register)
(global-set-key (kbd "M-r x") 'copy-to-register)
(global-set-key (kbd "M-r +") 'increment-register)
#+END_SRC

***** Utilization
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-r i") 'insert-register)
(global-set-key (kbd "M-r j") 'jump-to-register)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-r f") 'frameset-to-register)
(global-set-key (kbd "M-r w") 'window-configuration-to-register)
#+END_SRC

*** Macros
**** Unbinded
***** Recording
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x ("))    ;; kmacro-start-macro
(global-unset-key (kbd "C-x C-k s"))    ;; kmacro-start-macro
(global-unset-key (kbd "C-x C-k C-s"))    ;; kmacro-start-macro
(global-unset-key (kbd "C-x C-k C-k"))    ;; kmacro-end-or-call-macro-repeat
(global-unset-key (kbd "C-x e"))    ;; kmacro-end-and-call-macro
(global-unset-key (kbd "C-x )"))    ;; kmacro-end-macro

(global-unset-key (kbd "C-x C-k RET"))    ;; kmacro-edit-macro
(global-unset-key (kbd "C-x C-k C-e"))    ;; kmacro-edit-macro-repeat
(global-unset-key (kbd "S-<mouse-3>"))    ;; kmarcro-end-call-mouse
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-k C-a"))    ;; kmacro-add-counter
(global-unset-key (kbd "C-x C-k C-c"))    ;; kmacro-set-counter
(global-unset-key (kbd "C-x C-k C-d"))    ;; kmacro-delete-ring-head

(global-unset-key (kbd "C-x C-k C-f"))    ;; kmacro-set-format
(global-unset-key (kbd "C-x C-k TAB"))    ;; kmacro-insert-counter

(global-unset-key (kbd "C-x C-k C-l"))    ;; kmacro-call-ring-2nd-repeat

(global-unset-key (kbd "C-x C-k C-n"))    ;; kmacro-cycle-ring-next
(global-unset-key (kbd "C-x C-k C-p"))    ;; kmacro-cycle-ring-previous

(global-unset-key (kbd "C-x C-k C-t"))    ;; kmacro-swap-ring
(global-unset-key (kbd "C-x C-k C-v"))    ;; kmacro-view-macro-repeat
(global-unset-key (kbd "C-x C-k SPC"))    ;; kmacro-step-edit-macro
(global-unset-key (kbd "C-x C-k b"))    ;; kmacro-bind-to-key
(global-unset-key (kbd "C-x C-k d"))    ;; kmacro-redisplay
(global-unset-key (kbd "C-x C-k e"))    ;; edit-kbd-macro
(global-unset-key (kbd "C-x C-k l"))    ;; kmacro-edit-lossage
(global-unset-key (kbd "C-x C-k n"))    ;; kmacro-name-last-macro
(global-unset-key (kbd "C-x C-k q"))    ;; kbd-macro-query
(global-unset-key (kbd "C-x C-k r"))    ;; apply-macro-to-region-lines

(global-unset-key (kbd "C-x C-k x"))    ;; kmacro-to-register
(global-unset-key (kbd "C-x q"))    ;; kbd-macro-query
#+END_SRC

**** Binded
***** asdf
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Bookmarks
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r M"))    ;; bookmark-set-no-overwrite
(global-unset-key (kbd "C-x r b"))    ;; bookmark-jump
(global-unset-key (kbd "C-x r l"))    ;; bookmark-bmenu-list
(global-unset-key (kbd "C-x r m"))    ;; bookmark-set
#+END_SRC

**** Binded
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Windows
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'windows-map)
(global-set-key (kbd "C-w") 'windows-map)
#+END_SRC

**** Unbinded
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 C-o"))    ;; display-buffer
(global-unset-key (kbd "C-x 4 0"))    ;; kill-buffer-and-window
(global-unset-key (kbd "C-x 4 a"))    ;; add-change-log-entry-other-window
(global-unset-key (kbd "C-x 4 b"))    ;; switch-to-buffer-other-window
(global-unset-key (kbd "C-x o"))    ;; other-window
(global-unset-key (kbd "C-x 4 c"))    ;; clone-indirect-buffer-other-window
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 C-f"))    ;; find-file-other-window
(global-unset-key (kbd "C-x 4 C-j"))    ;; dired-jump-other-window
(global-unset-key (kbd "C-x 4 ."))    ;; xref-find-definitions-other-window
(global-unset-key (kbd "C-x 4 d"))    ;; dired-other-window
(global-unset-key (kbd "C-x 4 f"))    ;; find-file-other-window
(global-unset-key (kbd "C-x 4 r"))    ;; find-file-read-only-other-window
#+END_SRC

***** Management
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x +"))    ;; balance-windows
(global-unset-key (kbd "C-x {"))    ;; shrink-window-horizontally
(global-unset-key (kbd "C-x }"))    ;; enlarge-window-horizontally

(global-unset-key (kbd "C-x 0"))    ;; delete-window
(global-unset-key (kbd "C-x 1"))    ;; delete-other-windows
(global-unset-key (kbd "C-x 2"))    ;; split-window-below
(global-unset-key (kbd "C-x 3"))    ;; split-window-right
(global-unset-key (kbd "C-x ^"))    ;; enlarge-window
(global-unset-key (kbd "C-x -"))    ;; shrink-window-if-larger-than-buffer
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 1"))    ;; same-window-prefix
(global-unset-key (kbd "C-x 4 4"))    ;; other-window-prefix
(global-unset-key (kbd "C-x 4 m"))    ;; compose-mail-other-window
(global-unset-key (kbd "C-x 4 p"))    ;; project-other-window-command
#+END_SRC

**** Binded
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w b") 'display-buffer)
(global-set-key (kbd "C-w W") 'kill-buffer-and-window)
(global-set-key (kbd "C-w B") 'switch-to-buffer-other-window)
(global-set-key (kbd "C-w c") 'clone-indirect-buffer-other-window)
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w C-f") 'find-file-other-window)
(global-set-key (kbd "C-w C-d") 'dired-jump-other-window)
(global-set-key (kbd "C-w .") 'xref-find-definitions-other-window)
(global-set-key (kbd "C-w d") 'dired-other-window)
#+END_SRC

***** Management
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w =") 'balance-windows)
(global-set-key (kbd "C-w <left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-w <right>") 'enlarge-window-horizontally)

(global-set-key (kbd "C-w 0") 'delete-window)
(global-set-key (kbd "C-w 1") 'delete-other-windows)
(global-set-key (kbd "C-w 2") 'split-window-below)
(global-set-key (kbd "C-w 3") 'split-window-right)
(global-set-key (kbd "C-w ^") 'enlarge-window)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w m") 'compose-mail-other-window)
(global-set-key (kbd "C-w p") 'project-other-window-command)
#+END_SRC

****** 2C
******* Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<f2> 2"))    ;; 2C-two-columns
(global-unset-key (kbd "<f2> b"))    ;; 2C-associate-buffer
(global-unset-key (kbd "<f2> s"))    ;; 2C-split
(global-unset-key (kbd "<f2> <f2>"))    ;; 2C-two-columns
(global-unset-key (kbd "C-x 6 2"))    ;; 2C-two-columns
(global-unset-key (kbd "C-x 6 b"))    ;; 2C-associate-buffer
(global-unset-key (kbd "C-x 6 s"))    ;; 2C-split
(global-unset-key (kbd "C-x 6 <f2>"))    ;; 2C-two-columns
#+END_SRC

*** Buffers
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-<left>"))    ;; previous-buffer
(global-unset-key (kbd "C-x C-<right>"))    ;; next-buffer
(global-unset-key (kbd "C-x <left>"))    ;; previous-buffer
(global-unset-key (kbd "C-x <right>"))    ; next-buffer
(global-unset-key (kbd "C-x b"))    ;; switch-to-buffer
(global-unset-key (kbd "C-x C-c"))    ;; save-buffers-kill-terminal
(global-unset-key (kbd "C-x C-b"))    ;; list-buffers
(global-unset-key (kbd "C-x k"))    ;; kill-buffer
(global-unset-key (kbd "C-x s"))    ;; save-some-buffers
#+END_SRC

*** Frames
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'frames-map)
(global-set-key (kbd "C-f") 'frames-map)
#+END_SRC

**** Unbinded
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 0"))    ;; delete-frame
(global-unset-key (kbd "C-x 5 1"))    ;; delete-other-frames
(global-unset-key (kbd "C-x 5 2"))    ;; make-frame-command
(global-unset-key (kbd "C-x 5 b"))    ;; switch-to-buffer-other-frame
(global-unset-key (kbd "C-x 5 c"))    ;; clone-frame
(global-unset-key (kbd "C-x 5 o"))    ;; other-frame
(global-unset-key (kbd "C-x 5 C-o"))    ;; display-buffer-other-frame
(global-unset-key (kbd "M-<f10>"))    ;; toggle-frame-maximized
(global-unset-key (kbd "ESC <f10>"))    ;; toggle-frame-maximized
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 C-f"))    ;; find-file-other-frame
(global-unset-key (kbd "C-x 5 ."))    ;; xref-find-definitions-other-frame
(global-unset-key (kbd "C-x 5 f"))    ;; find-file-other-frame
(global-unset-key (kbd "C-x 5 r"))    ;; find-file-read-only-other-frame
(global-unset-key (kbd "C-x 5 d"))    ;; dired-other-frame
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))    ;; suspend-frame
(global-unset-key (kbd "C-x z"))    ;; suspend-frame
(global-unset-key (kbd "C-x C-z"))    ;; suspend-frame

(global-unset-key (kbd "C-x 5 5"))    ;; other-frame-prefix
(global-unset-key (kbd "C-x 5 m"))    ;; compose-mail-other-frame
(global-unset-key (kbd "C-x 5 p"))    ;; project-other-frame-command
#+END_SRC

**** Binded
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f w") 'delete-frame)
(global-set-key (kbd "C-f W") 'delete-other-frames)
(global-set-key (kbd "C-f f") 'make-frame-command)
(global-set-key (kbd "C-f b") 'switch-to-buffer-other-frame)
(global-set-key (kbd "C-f F") 'clone-frame)
(global-set-key (kbd "C-f o") 'other-frame)
(global-set-key (kbd "C-f C-b") 'display-buffer-other-frame)
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f C-f") 'find-file-other-frame)
(global-set-key (kbd "C-f x") 'xref-find-definitions-other-frame)
(global-set-key (kbd "C-f d") 'dired-other-frame)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f 5") 'other-frame-prefix)
(global-set-key (kbd "C-f m") 'compose-mail-other-frame)
(global-set-key (kbd "C-f p") 'project-other-frame-command)
#+END_SRC

*** Abbrev
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x a C-a"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a '"))    ;; expand-abbrev
(global-unset-key (kbd "C-x a +"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a -"))    ;; inverse-add-global-abbrev
(global-unset-key (kbd "C-x a e"))    ;; expand-abbrev
(global-unset-key (kbd "C-x a g"))    ;; add-global-abbrev
(global-unset-key (kbd "C-x a l"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a n"))    ;; expand-jump-to-next-slot
(global-unset-key (kbd "C-x a p"))    ;; expand-jump-to-previous-slot
(global-unset-key (kbd "C-x a i g"))    ;; inverse-add-global-abbrev
(global-unset-key (kbd "C-x a i l"))    ;; inverse-add-mode-abbrev
(global-unset-key (kbd "C-x '"))    ;; expand-abbrev
(global-unset-key (kbd "C-M-/"))    ;; dabbrev-completion
(global-unset-key (kbd "M-/"))    ;; abbrev-expand
#+END_SRC

*** Highlighting
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'hi-map)
(global-set-key (kbd "M-m") 'hi-map)
#+END_SRC

**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-s h ."))    ;; hightlight-symbol-at-point
(global-unset-key (kbd "M-s h p"))    ;; highlight-phrase
(global-unset-key (kbd "M-s h r"))    ;; highlight-regexp
(global-unset-key (kbd "M-s h u"))    ;; unhighlight-regexp
(global-unset-key (kbd "M-s h l"))    ;; highlight-lines-matching-regexp
(global-unset-key (kbd "M-s h f"))    ;; hi-lock-find-patterns
(global-unset-key (kbd "M-s h w"))    ;; hi-lock-write-interactive-patterns
#+END_SRC

**** Binded
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-m h") 'highlight-symbol-at-point)
(global-set-key (kbd "M-m p") 'highlight-phrase)
(global-set-key (kbd "M-m x") 'highlight-regexp)
(global-set-key (kbd "M-m u") 'unhighlight-regexp)
(global-set-key (kbd "M-m l") 'highlight-lines-matching-regexp)
#+END_SRC

*** Mail
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x m"))    ;; compose-mail
#+END_SRC

*** Language and Coding System
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x RET C-\\"))    ;; set-input-method
(global-unset-key (kbd "C-x RET F"))    ;; set-file-name-coding-system
(global-unset-key (kbd "C-x RET X"))    ;; set-next-selection-coding-system
(global-unset-key (kbd "C-x RET c"))    ;; universal-coding-system-argument
(global-unset-key (kbd "C-x RET f"))    ;; set-buffer-file-coding-system
(global-unset-key (kbd "C-x RET k"))    ;; set-keyboard-coding-system
(global-unset-key (kbd "C-x RET l"))    ;; set-language-environment
(global-unset-key (kbd "C-x RET p"))    ;; set-buffer-process-coding-system
(global-unset-key (kbd "C-x RET r"))    ;; revert-buffer-with-coding-system
(global-unset-key (kbd "C-x RET t"))    ;; set-terminal-coding-system
(global-unset-key (kbd "C-x RET x"))    ;; set-selection-coding-system
#+END_SRC

*** Other
**** Unbinded
***** Prefixes
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x *"))    ;; calc-dispatch
(global-unset-key (kbd "C-x 4"))    ;; ctrl-x-4-prefix
(global-unset-key (kbd "C-x 5"))    ;; ctrl-x-5-prefix
(global-unset-key (kbd "C-x 6"))    ;; 2C-command
(global-unset-key (kbd "C-x C-k"))    ;; kmacro-keymap
(global-unset-key (kbd "C-x v"))    ;; vc-prefix-map
#+END_SRC

***** Scaling
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-+"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C--"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C-0"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C-="))    ;; text-scale-adjust
(global-unset-key (kbd "C-<wheel-down>"))    ;; mouse-wheel-text-scale
(global-unset-key (kbd "C-<wheel-up>"))    ;; mouse-wheel-text-scale
#+END_SRC

***** Sexp
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-@"))    ;; mark-sexp
(global-unset-key (kbd "C-M-b"))    ;; backward-sexp
(global-unset-key (kbd "C-M-SPC"))    ;; mark-sexp
(global-unset-key (kbd "ESC C-<backspace>"))    ;; backward-kill-sexp
(global-unset-key (kbd "ESC C-<delete>"))    ;; backward-kill-sexp
(global-unset-key (kbd "C-M-<left>"))    ;; backward-sexp
(global-unset-key (kbd "C-M-<right>"))    ;; forward-sexp
(global-unset-key (kbd "ESC C-<left>"))    ;; backward-sexp
(global-unset-key (kbd "ESC C-<right>"))    ;; forward-sexp
(global-unset-key (kbd "C-M-k"))    ;; kill-sexp
(global-unset-key (kbd "C-x C-e"))    ;; eval-last-sexp
(global-unset-key (kbd "C-M-f"))    ;; forward-sexp
#+END_SRC

***** Lists
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-d"))    ;; down-list
(global-unset-key (kbd "C-M-n"))    ;; forward-list
(global-unset-key (kbd "C-M-p"))    ;; backward-list
(global-unset-key (kbd "C-M-u"))    ;; backward-up-list
(global-unset-key (kbd "C-M-<up>"))    ;; backward-up-list
(global-unset-key (kbd "ESC C-<down>"))    ;; down-list
(global-unset-key (kbd "ESC C-<up>"))    ;; backward-up-list
#+END_SRC

***** Secondary Mouse
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<down-mouse-1>"))    ;; mouse-drag-secondary
(global-unset-key (kbd "M-<drag-mouse-1>"))    ;; mouse-set-secondary
(global-unset-key (kbd "M-<mouse-1>"))    ;; mouse-start-secondary
(global-unset-key (kbd "M-<mouse-2>"))    ;; mouse-yank-secondary
(global-unset-key (kbd "M-<mouse-3>"))    ;; mouse-secondary-save-then-kill
#+END_SRC

***** Menus
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "S-<down-mouse-1>"))    ;; mouse-appearance-menu
(global-unset-key (kbd "S-<f10>"))    ;; context-menu-open
(global-unset-key (kbd "M-`"))    ;; tmm-menubar
(global-unset-key (kbd "C-<down-mouse-1>"))    ;; mouse-buffer-menu
(global-unset-key (kbd "C-<down-mouse-2>"))    ;; facemenu-menu
(global-unset-key (kbd "C-<f10>"))    ;; buffer-menu-open
#+END_SRC

***** Shell
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-!"))    ;; shell-command
(global-unset-key (kbd "M-&"))    ;; async-shell-command
(global-unset-key (kbd "M-|"))    ;; shell-command-on-region
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-@"))    ;; set-mark-command
(global-unset-key (kbd "M-~"))    ;; not-modified
(global-unset-key (kbd "C-x f"))    ;; set-fill-column
(global-unset-key (kbd "C-x $"))    ;; set-selective-display
(global-unset-key (kbd "C-x ."))    ;; set-fill-prefix
(global-unset-key (kbd "C-x ="))    ;; what-cursor-position
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-q"))    ;; read-only-mode
(global-unset-key (kbd "C-x C-v"))    ;; find-alternate-file
(global-unset-key (kbd "C-x ;"))    ;; comment-set-column
(global-unset-key (kbd "C-x \\"))    ;; activate-transient-input-method
(global-unset-key (kbd "C-x C-n"))    ;; set-goal-column
(global-unset-key (kbd "C-M-c"))    ;; exit-recursive-edit
(global-unset-key (kbd "C-M-h"))    ;; mark-defun
(global-unset-key (kbd "C-M-w"))    ;; append-next-kill
(global-unset-key (kbd "C-M--"))    ;; negative-argument
(global-unset-key (kbd "C-<drag-n-drop>"))    ;; w32-drag-n-drop-other-frame
(global-unset-key (kbd "M-X"))    ;; execute-extended-command-for-buffer
(global-unset-key (kbd "M-:"))    ;; eval-expression
(global-unset-key (kbd "M-;"))    ;; comment-dwim

(global-unset-key (kbd "C-x C-p"))    ;; mark-page
(global-unset-key (kbd "C-x C-d"))    ;; list-directory
(global-unset-key (kbd "C-x l"))    ;; count-lines-page

(global-unset-key (kbd "C-M-<mouse-1>"))    ;; mouse-set-point
#+END_SRC

**** Binded
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-.") 'kill-region)
(global-set-key (kbd "C-;") 'yank)
(global-set-key (kbd "M-'") 'kill-ring-save)
#+END_SRC

*** Searching
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-f"))    ;; find-file-read-only
(global-unset-key (kbd "C-x C-r"))    ;; find-file-read-only
(global-unset-key (kbd "M-."))    ;; xref-find-definitions
(global-unset-key (kbd "M-?"))    ;; xref-find-references
(global-unset-key (kbd "C-M-."))    ;; xref-find-apropos

(global-unset-key (kbd "M-$"))    ;; ispell-word
#+END_SRC

*** Text Manipulation
**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-t"))    ;; transpose-key

(global-unset-key (kbd "M-l"))    ;; downcase-word
(global-unset-key (kbd "M-u"))    ;; upcase-word
(global-unset-key (kbd "M-c"))    ;; capitalize-word
(global-unset-key (kbd "M-t"))    ;; tranpose-words
(global-unset-key (kbd "M-d"))    ;; kill-word
(global-unset-key (kbd "M-DEL"))    ;; backward-kill-word
(global-unset-key (kbd "C-<insert>"))    ;; kill-ring-save
(global-unset-key (kbd "C-<insertchar>"))    ;; kill-ring-save

(global-unset-key (kbd "C-d"))    ;; delete-char
(global-unset-key (kbd "M-k"))    ;; kill-sentence
(global-unset-key (kbd "C-x C-t"))    ;; transpose-lines
(global-unset-key (kbd "C-DEL"))    ;; backward-kill-sentece
(global-unset-key (kbd "C-x DEL"))    ;; backward-kill-sentence
(global-unset-key (kbd "M-q"))    ;; fill-paragraph
(global-unset-key (kbd "C-S-<backspace>"))    ;; kill-whole-line
(global-unset-key (kbd "C-<backspace>"))    ;; backward-kill-word
(global-unset-key (kbd "C-<delete>"))    ;; kill-word
(global-unset-key (kbd "C-<down>"))    ;; forward-paragraph
(global-unset-key (kbd "C-M-\\"))    ;; indent-region
(global-unset-key (kbd "M-("))    ;; insert-parentheses
(global-unset-key (kbd "C-M-i"))    ;; complete-symbol
(global-unset-key (kbd "C-M-j"))    ;; default-indent-new-line
(global-unset-key (kbd "C-M-o"))    ;; split-line
(global-unset-key (kbd "C-x TAB"))    ;; indent-rigidly
(global-unset-key (kbd "M-\\"))    ;; delete-horizontal-space
(global-unset-key (kbd "M-^"))    ;; delete-indentation

(global-unset-key (kbd "C-x C-l"))    ;; downcase-region
(global-unset-key (kbd "C-x C-u"))    ;; upcase-region

(global-unset-key (kbd "C-x i"))    ;; insert-file
#+END_SRC

***** Whitespace
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-i"))    ;; tab-to-tab-stop
(global-unset-key (kbd "M-j"))    ;; default-indent-new-line
(global-unset-key (kbd "M-SPC"))    ;; just-one-space
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-z"))    ;; zap-to-char
(global-unset-key (kbd "C-M-r"))    ;; isearch-backward-regexp
(global-unset-key (kbd "C-M-s"))    ;; isearch-forward-regexp
(global-unset-key (kbd "C-M-%"))    ;; query-replace-regexp
(global-unset-key (kbd "M-%"))    ;; query-replace
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Movement
**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-f"))    ;; forward-char
(global-unset-key (kbd "C-b"))    ;; backward-char

(global-unset-key (kbd "M-f"))    ;; forward-word
(global-unset-key (kbd "M-b"))    ;; backward-word
(global-unset-key (kbd "ESC <left>"))    ;; backward-word

(global-unset-key (kbd "M-a"))    ;; backward-sentence
(global-unset-key (kbd "M-e"))    ;; forward-sentence

(global-unset-key (kbd "C-<up>"))    ;; backward-paragraph
#+END_SRC

***** Whitespace
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-m"))    ;; back-to-indentation
#+END_SRC

***** Scrolling
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<"))    ;; beginning-of-buffer
(global-unset-key (kbd "C-M-l"))    ;; reposition-window
(global-unset-key (kbd "M->"))    ;; end-of-buffer
(global-unset-key (kbd "M-v"))    ;; scroll-down-command
(global-unset-key (kbd "C-M-S-v"))    ;; scroll-other-window-down

(global-unset-key (kbd "C-<next>"))    ;; scroll-left
(global-unset-key (kbd "C-<prior>"))    ;; scroll-right
(global-unset-key (kbd "C-x <"))    ;; scroll-left
(global-unset-key (kbd "C-x >"))    ;; scroll-right
(global-unset-key (kbd "S-<wheel-down>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-left>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-right>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-up>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<next>"))    ;; scroll-other-window
(global-unset-key (kbd "M-<prior>"))    ;; scroll-other-window-down
(global-unset-key (kbd "M-<wheel-down>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-left>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-right>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-up>"))    ;; mwheel-scroll
(global-unset-key (kbd "C-M-a"))    ;; beginning-of-defun
(global-unset-key (kbd "C-M-<end>"))    ;; end-of-defun
(global-unset-key (kbd "C-M-<home>"))    ;; beginning-of-defun
(global-unset-key (kbd "C-M-e"))    ;; end-of-defun
(global-unset-key (kbd "M-<home>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "M-<begin>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "ESC C-<end>"))    ;; end-of-defun
(global-unset-key (kbd "ESC C-<home>"))    ;; beginning-of-defun
(global-unset-key (kbd "ESC <begin>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "ESC <end>"))    ;; end-of-buffer-other-window
(global-unset-key (kbd "M-<end>"))    ;; end-of-buffer-other-window
(global-unset-key (kbd "ESC <next>"))    ;; scroll-other-window
(global-unset-key (kbd "ESC <prior>"))    ;; scroll-other-window-down
(global-unset-key (kbd "C-<home>"))    ;; beginning-of-buffer
(global-unset-key (kbd "C-M-v"))    ;; scroll-other-window
(global-unset-key (kbd "C-<end>"))    ;; end-of-buffer
(global-unset-key (kbd "ESC <home>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "<Scroll Lock>"))    ;; scroll-lock-mode

(global-unset-key (kbd "C-n"))    ;; next-line
(global-unset-key (kbd "C-p"))    ;; previous-line

(global-unset-key (kbd "C-x ["))    ;; backward-page
(global-unset-key (kbd "C-x ]"))    ;; forward-page
#+END_SRC

***** Alignment
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-r"))    ;; move-to-window-line-top-bottom
(global-unset-key (kbd "C-l"))    ;; recenter-top-bottom
(global-unset-key (kbd "C-M-S-l"))    ;; recenter-other-window
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-g TAB"))    ;; move-to-column
(global-unset-key (kbd "M-g c"))    ;; goto-char
(global-unset-key (kbd "M-g g"))    ;; goto-line
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<prior>") 'beginning-of-buffer)
(global-set-key (kbd "C-<next>") 'end-of-buffer)
#+END_SRC

*** Rectangles
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'rect-map)
(global-set-key (kbd "M-t") 'rect-map)
#+END_SRC

**** Unbinded
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r y"))    ;; yank-rectangle
(global-unset-key (kbd "C-x r k"))    ;; kill-rectangle
(global-unset-key (kbd "C-x r c"))    ;; clear-rectangle
(global-unset-key (kbd "C-x r d"))    ;; delete-rectangle
(global-unset-key (kbd "C-x r o"))    ;; open-rectangle
(global-unset-key (kbd "C-x r t"))    ;; string-rectangle
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r N"))    ;; rectangle-number-lines
(global-unset-key (kbd "C-x r r"))    ;; copy-rectangle-to-register
#+END_SRC

**** Binded
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t y") 'yank-rectangle)
(global-set-key (kbd "M-t k") 'kill-rectangle)
(global-set-key (kbd "M-t c") 'clear-rectangle)
(global-set-key (kbd "M-t d") 'delete-rectangle)
(global-set-key (kbd "M-t o") 'open-rectangle)
(global-set-key (kbd "M-t s") 'string-rectangle)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t n") 'rectangle-number-lines)
(global-set-key (kbd "M-t R") 'copy-rectangle-to-register)
#+END_SRC

*** Tabs
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'tabs-map)
(global-set-key (kbd "C-t") 'tabs-map)
#+END_SRC

**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t 2"))    ;; tab-new
(global-unset-key (kbd "C-x t 0"))    ;; tab-close
(global-unset-key (kbd "C-x t 1"))    ;; tab-close-other
(global-unset-key (kbd "C-x t u"))    ;; tab-undo
(global-unset-key (kbd "C-x t n"))    ;; tab-duplicate
(global-unset-key (kbd "C-x t o"))    ;; tab-next
(global-unset-key (kbd "C-x t O"))    ;; tab-previous
(global-unset-key (kbd "C-x t G"))    ;; tab-group
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t C-f"))    ;; find-file-other-tab
(global-unset-key (kbd "C-x t f"))      ;; find-file-other-tab
(global-unset-key (kbd "C-x t C-r"))    ;; find-file-read-only-other-tab
(global-unset-key (kbd "C-x t d"))      ;; dired-other-tab
#+END_SRC

***** Movement
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t N"))      ;; tab-new-to
(global-unset-key (kbd "C-x t M"))      ;; tab-move-to
(global-unset-key (kbd "C-x t RET"))    ;; tab-switch
(global-unset-key (kbd "C-x t m"))      ;; tab-move
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t t"))    ;; other-tab-prefix
(global-unset-key (kbd "C-x t b"))    ;; switch-to-buffer-other-tab
(global-unset-key (kbd "C-x t r"))    ;; tab-rename
(global-unset-key (kbd "C-x t p"))    ;; project-other-tab-command
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t t") 'tab-new)
(global-set-key (kbd "C-t w") 'tab-close)
(global-set-key (kbd "C-t W") 'tab-close-other)
(global-set-key (kbd "C-t u") 'tab-undo)
(global-set-key (kbd "C-t D") 'tab-duplicate)
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t d") 'dired-other-tab)
(global-set-key (kbd "C-t C-f") 'find-file-other-tab)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t p") 'project-other-tab-command)
#+END_SRC

*** VCS
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'vcs-map)
(global-set-key (kbd "C-v") 'vcs-map)
#+END_SRC

**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v v"))    ;; vc-next-action
(global-unset-key (kbd "C-x v +"))    ;; vc-update
(global-unset-key (kbd "C-x v P"))    ;; vc-push
(global-unset-key (kbd "C-x v i"))    ;; vc-register
(global-unset-key (kbd "C-x v d"))    ;; vc-dir

(global-unset-key (kbd "C-x v G"))    ;; vc-ignore
(global-unset-key (kbd "C-x v m"))    ;; vc-merge
(global-unset-key (kbd "C-x v u"))    ;; vc-revert
(global-unset-key (kbd "C-x v x"))    ;; vc-delete-file
#+END_SRC

***** Records
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v ="))    ;; vc-diff
(global-unset-key (kbd "C-x v D"))    ;; vc-root-diff
(global-unset-key (kbd "C-x v M D"))    ;; vc-diff-mergebase
(global-unset-key (kbd "C-x v h"))    ;; vc-region-history
(global-unset-key (kbd "C-x v l"))    ;; vc-print-log
(global-unset-key (kbd "C-x v L"))    ;; vc-print-root-log
(global-unset-key (kbd "C-x v M L"))    ;; vc-log-mergebase
(global-unset-key (kbd "C-x v O"))    ;; vc-log-outgoing
(global-unset-key (kbd "C-x v I"))    ;; vc-log-incoming

(global-unset-key (kbd "C-x v a"))    ;; vc-annotate
(global-unset-key (kbd "C-x v g"))    ;; vc-annotate

(global-unset-key (kbd "C-x v ~"))    ;; vc-revision-other-window
#+END_SRC

***** Logging
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v s"))    ;; vc-create-tag
(global-unset-key (kbd "C-x v r"))    ;; vc-retrieve-tag
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v b"))    ;; vc-switch-backend
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v v") 'vc-next-action)
(global-set-key (kbd "C-v p") 'vc-push)
(global-set-key (kbd "C-v P") 'vc-update)
(global-set-key (kbd "C-v I") 'vc-register)
(global-set-key (kbd "C-v d") 'vc-dir)

(global-set-key (kbd "C-v G") 'vc-ignore)
(global-set-key (kbd "C-v m") 'vc-merge)
(global-set-key (kbd "C-v U") 'vc-revert)
(global-set-key (kbd "C-v C-x") 'vc-delete-file)
#+END_SRC

***** Records
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v =") 'vc-diff)
(global-set-key (kbd "C-v +") 'vc-root-diff)
(global-set-key (kbd "C-v h") 'vc-region-history)
(global-set-key (kbd "C-v C-p") 'vc-print-log)
(global-set-key (kbd "C-v C-l") 'vc-print-root-log)
(global-set-key (kbd "C-v a") 'vc-annotate)
(global-set-key (kbd "C-v ~") 'vc-revision-other-window)
#+END_SRC

***** Logging
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v c") 'vc-create-tag)
(global-set-key (kbd "C-v t") 'vc-retrieve-tag)

(global-set-key (kbd "C-v l") 'vc-log-outgoing)
(global-set-key (kbd "C-v L") 'vc-log-incoming)
#+END_SRC

*** Projects
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'project-map)
(global-set-key (kbd "C-p") 'project-map)
#+END_SRC

**** Unbinding
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p D"))    ;; project-dired
(global-unset-key (kbd "C-x p v"))    ;; project-vc-dir
(global-unset-key (kbd "C-x p b"))    ;; project-switch-to-buffer
(global-unset-key (kbd "C-x p k"))    ;; project-kill-buffers
(global-unset-key (kbd "C-x p p"))    ;; project-switch-project
#+END_SRC

***** Commands
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p s"))    ;; project-shell
(global-unset-key (kbd "C-x p !"))    ;; project-shell-command
(global-unset-key (kbd "C-x p &"))    ;; project-async-shell-command
(global-unset-key (kbd "C-x p x"))    ;; project-execute-extended-command
(global-unset-key (kbd "C-x p c"))    ;; project-compile
(global-unset-key (kbd "C-x p e"))    ;; project-eshell
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p F"))    ;; project-or-external-find-file
(global-unset-key (kbd "C-x p G"))    ;; project-or-external-find-regexp
(global-unset-key (kbd "C-x p f"))    ;; project-find-file
(global-unset-key (kbd "C-x p g"))    ;; project-find-regexp
(global-unset-key (kbd "C-x p d"))    ;; project-find-dir
(global-unset-key (kbd "C-x p r"))    ;; project-query-replace-regexp
#+END_SRC

**** Binding
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p d") 'project-dired)
(global-set-key (kbd "C-p D") 'project-vc-dir)
(global-set-key (kbd "C-p b") 'project-switch-to-buffer)
(global-set-key (kbd "C-p C-k") 'project-kill-buffers)
(global-set-key (kbd "C-p p") 'project-switch-project)
#+END_SRC

***** Commands
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p s") 'project-shell)
(global-set-key (kbd "C-p S") 'project-shell-command)
(global-set-key (kbd "C-p C-s") 'project-async-shell-command)
(global-set-key (kbd "C-p c") 'project-compile)
(global-set-key (kbd "C-p e") 'project-eshell)
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p F") 'project-or-external-find-file)
(global-set-key (kbd "C-p G") 'project-or-external-find-regexp)
(global-set-key (kbd "C-p C-f") 'project-find-file)
(global-set-key (kbd "C-p g") 'project-find-regexp)
(global-set-key (kbd "C-p d") 'project-find-dir)
(global-set-key (kbd "C-p r") 'project-query-replace-regexp)
#+END_SRC

*** Registers
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'register-map)
(global-set-key (kbd "M-r") 'register-map)
#+END_SRC

**** Unbinded
***** Manipulation
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r C-@"))    ;; point-to-register
(global-unset-key (kbd "C-x r C-SPC"))    ;; point-to-register
(global-unset-key (kbd "C-x r SPC"))    ;; point-to-register
(global-unset-key (kbd "C-x r n"))    ;; number-to-register

(global-unset-key (kbd "C-x r s"))    ;; copy-to-register
(global-unset-key (kbd "C-x r x"))    ;; copy-to-register
(global-unset-key (kbd "C-x r +"))    ;; increment-register
#+END_SRC

***** Utilization
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r g"))    ;; insert-register
(global-unset-key (kbd "C-x r i"))    ;; insert-register
(global-unset-key (kbd "C-x r j"))    ;; jump-to-register
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r f"))    ;; frameset-to-register
(global-unset-key (kbd "C-x r w"))    ;; window-configuration-to-register
(global-unset-key (kbd "C-x r ESC"))    ;; Prefix Command
#+END_SRC

**** Binded
***** Manipulation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-r n") 'number-to-register)
(global-set-key (kbd "M-r x") 'copy-to-register)
(global-set-key (kbd "M-r +") 'increment-register)
#+END_SRC

***** Utilization
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-r i") 'insert-register)
(global-set-key (kbd "M-r j") 'jump-to-register)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-r f") 'frameset-to-register)
(global-set-key (kbd "M-r w") 'window-configuration-to-register)
#+END_SRC

*** Bookmarks
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r M"))    ;; bookmark-set-no-overwrite
(global-unset-key (kbd "C-x r b"))    ;; bookmark-jump
(global-unset-key (kbd "C-x r l"))    ;; bookmark-bmenu-list
(global-unset-key (kbd "C-x r m"))    ;; bookmark-set
#+END_SRC

**** Binded
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Macros
**** Unbinded
***** Recording
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x ("))    ;; kmacro-start-macro
(global-unset-key (kbd "C-x C-k s"))    ;; kmacro-start-macro
(global-unset-key (kbd "C-x C-k C-s"))    ;; kmacro-start-macro
(global-unset-key (kbd "C-x C-k C-k"))    ;; kmacro-end-or-call-macro-repeat
(global-unset-key (kbd "C-x e"))    ;; kmacro-end-and-call-macro
(global-unset-key (kbd "C-x )"))    ;; kmacro-end-macro

(global-unset-key (kbd "C-x C-k RET"))    ;; kmacro-edit-macro
(global-unset-key (kbd "C-x C-k C-e"))    ;; kmacro-edit-macro-repeat
(global-unset-key (kbd "S-<mouse-3>"))    ;; kmarcro-end-call-mouse
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-k C-a"))    ;; kmacro-add-counter
(global-unset-key (kbd "C-x C-k C-c"))    ;; kmacro-set-counter
(global-unset-key (kbd "C-x C-k C-d"))    ;; kmacro-delete-ring-head

(global-unset-key (kbd "C-x C-k C-f"))    ;; kmacro-set-format
(global-unset-key (kbd "C-x C-k TAB"))    ;; kmacro-insert-counter

(global-unset-key (kbd "C-x C-k C-l"))    ;; kmacro-call-ring-2nd-repeat

(global-unset-key (kbd "C-x C-k C-n"))    ;; kmacro-cycle-ring-next
(global-unset-key (kbd "C-x C-k C-p"))    ;; kmacro-cycle-ring-previous

(global-unset-key (kbd "C-x C-k C-t"))    ;; kmacro-swap-ring
(global-unset-key (kbd "C-x C-k C-v"))    ;; kmacro-view-macro-repeat
(global-unset-key (kbd "C-x C-k SPC"))    ;; kmacro-step-edit-macro
(global-unset-key (kbd "C-x C-k b"))    ;; kmacro-bind-to-key
(global-unset-key (kbd "C-x C-k d"))    ;; kmacro-redisplay
(global-unset-key (kbd "C-x C-k e"))    ;; edit-kbd-macro
(global-unset-key (kbd "C-x C-k l"))    ;; kmacro-edit-lossage
(global-unset-key (kbd "C-x C-k n"))    ;; kmacro-name-last-macro
(global-unset-key (kbd "C-x C-k q"))    ;; kbd-macro-query
(global-unset-key (kbd "C-x C-k r"))    ;; apply-macro-to-region-lines

(global-unset-key (kbd "C-x C-k x"))    ;; kmacro-to-register
(global-unset-key (kbd "C-x q"))    ;; kbd-macro-query
#+END_SRC

**** Binded
***** Recording
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Buffers
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-<left>"))    ;; previous-buffer
(global-unset-key (kbd "C-x C-<right>"))    ;; next-buffer
(global-unset-key (kbd "C-x <left>"))    ;; previous-buffer
(global-unset-key (kbd "C-x <right>"))    ; next-buffer
(global-unset-key (kbd "C-x b"))    ;; switch-to-buffer
(global-unset-key (kbd "C-x C-c"))    ;; save-buffers-kill-terminal
(global-unset-key (kbd "C-x C-b"))    ;; list-buffers
(global-unset-key (kbd "C-x k"))    ;; kill-buffer
(global-unset-key (kbd "C-x s"))    ;; save-some-buffers
(global-unset-key (kbd "C-x C-q"))    ;; read-only-mode
#+END_SRC

*** Windows
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'windows-map)
(global-set-key (kbd "C-w") 'windows-map)
#+END_SRC

**** Unbinded
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 C-o"))    ;; display-buffer
(global-unset-key (kbd "C-x 4 0"))    ;; kill-buffer-and-window
(global-unset-key (kbd "C-x 4 a"))    ;; add-change-log-entry-other-window
(global-unset-key (kbd "C-x 4 b"))    ;; switch-to-buffer-other-window
(global-unset-key (kbd "C-x o"))    ;; other-window
(global-unset-key (kbd "C-x 4 c"))    ;; clone-indirect-buffer-other-window
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 C-f"))    ;; find-file-other-window
(global-unset-key (kbd "C-x 4 C-j"))    ;; dired-jump-other-window
(global-unset-key (kbd "C-x 4 ."))    ;; xref-find-definitions-other-window
(global-unset-key (kbd "C-x 4 d"))    ;; dired-other-window
(global-unset-key (kbd "C-x 4 f"))    ;; find-file-other-window
(global-unset-key (kbd "C-x 4 r"))    ;; find-file-read-only-other-window
#+END_SRC

***** Management
****** Size
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x +"))    ;; balance-windows
(global-unset-key (kbd "C-x ^"))    ;; enlarge-window
(global-unset-key (kbd "C-x }"))    ;; enlarge-window-horizontally
(global-unset-key (kbd "C-x {"))    ;; shrink-window-horizontally
(global-unset-key (kbd "C-x -"))    ;; shrink-window-if-larger-than-buffer
#+END_SRC

****** Deletion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 0"))    ;; delete-window
(global-unset-key (kbd "C-x 1"))    ;; delete-other-windows
#+END_SRC

****** Splitting
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 2"))    ;; split-window-below
(global-unset-key (kbd "C-x 3"))    ;; split-window-right
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 1"))    ;; same-window-prefix
(global-unset-key (kbd "C-x 4 4"))    ;; other-window-prefix
(global-unset-key (kbd "C-x 4 m"))    ;; compose-mail-other-window
(global-unset-key (kbd "C-x 4 p"))    ;; project-other-window-command
#+END_SRC

****** 2C
******* Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<f2> 2"))    ;; 2C-two-columns
(global-unset-key (kbd "<f2> b"))    ;; 2C-associate-buffer
(global-unset-key (kbd "<f2> s"))    ;; 2C-split
(global-unset-key (kbd "<f2> <f2>"))    ;; 2C-two-columns
(global-unset-key (kbd "C-x 6 2"))    ;; 2C-two-columns
(global-unset-key (kbd "C-x 6 b"))    ;; 2C-associate-buffer
(global-unset-key (kbd "C-x 6 s"))    ;; 2C-split
(global-unset-key (kbd "C-x 6 <f2>"))    ;; 2C-two-columns
#+END_SRC

**** Binded
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w b") 'display-buffer)

(global-set-key (kbd "C-w B") 'switch-to-buffer-other-window)
(global-set-key (kbd "C-w c") 'clone-indirect-buffer-other-window)
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w C-f") 'find-file-other-window)
(global-set-key (kbd "C-w C-d") 'dired-jump-other-window)
(global-set-key (kbd "C-w .") 'xref-find-definitions-other-window)
(global-set-key (kbd "C-w d") 'dired-other-window)
#+END_SRC

***** Management
****** Size
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w =") 'balance-windows)
(global-set-key (kbd "C-w <left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-w ^") 'enlarge-window)
(global-set-key (kbd "C-w <right>") 'enlarge-window-horizontally)
#+END_SRC

****** Deletion
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w 0") 'delete-window)
(global-set-key (kbd "C-w 1") 'delete-other-windows)
(global-set-key (kbd "C-w W") 'kill-buffer-and-window)
#+END_SRC

****** Splitting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w 2") 'split-window-below)
(global-set-key (kbd "C-w 3") 'split-window-right)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w m") 'compose-mail-other-window)
(global-set-key (kbd "C-w p") 'project-other-window-command)
#+END_SRC

*** Frames
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'frames-map)
(global-set-key (kbd "C-f") 'frames-map)
#+END_SRC

**** Unbinded
***** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 2"))    ;; make-frame-command
(global-unset-key (kbd "C-x 5 b"))    ;; switch-to-buffer-other-frame
(global-unset-key (kbd "C-x 5 c"))    ;; clone-frame
(global-unset-key (kbd "C-x 5 o"))    ;; other-frame
(global-unset-key (kbd "C-x 5 C-o"))    ;; display-buffer-other-frame

(global-unset-key (kbd "C-<drag-n-drop>"))    ;; w32-drag-n-drop-other-frame
#+END_SRC

***** Management
****** Size
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<f10>"))    ;; toggle-frame-maximized
(global-unset-key (kbd "ESC <f10>"))    ;; toggle-frame-maximized
#+END_SRC

****** Deletion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 0"))    ;; delete-frame
(global-unset-key (kbd "C-x 5 1"))    ;; delete-other-frames
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 C-f"))    ;; find-file-other-frame
(global-unset-key (kbd "C-x 5 ."))    ;; xref-find-definitions-other-frame
(global-unset-key (kbd "C-x 5 f"))    ;; find-file-other-frame
(global-unset-key (kbd "C-x 5 r"))    ;; find-file-read-only-other-frame
(global-unset-key (kbd "C-x 5 d"))    ;; dired-other-frame
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))    ;; suspend-frame
(global-unset-key (kbd "C-x z"))    ;; suspend-frame
(global-unset-key (kbd "C-x C-z"))    ;; suspend-frame

(global-unset-key (kbd "C-x 5 5"))    ;; other-frame-prefix
(global-unset-key (kbd "C-x 5 m"))    ;; compose-mail-other-frame
(global-unset-key (kbd "C-x 5 p"))    ;; project-other-frame-command
#+END_SRC

**** Binded
***** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f w") 'delete-frame)
(global-set-key (kbd "C-f W") 'delete-other-frames)
(global-set-key (kbd "C-f f") 'make-frame-command)
(global-set-key (kbd "C-f b") 'switch-to-buffer-other-frame)
(global-set-key (kbd "C-f F") 'clone-frame)
(global-set-key (kbd "C-f o") 'other-frame)
(global-set-key (kbd "C-f C-b") 'display-buffer-other-frame)
#+END_SRC

***** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f C-f") 'find-file-other-frame)
(global-set-key (kbd "C-f x") 'xref-find-definitions-other-frame)
(global-set-key (kbd "C-f d") 'dired-other-frame)
#+END_SRC

***** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f 5") 'other-frame-prefix)
(global-set-key (kbd "C-f m") 'compose-mail-other-frame)
(global-set-key (kbd "C-f p") 'project-other-frame-command)
#+END_SRC

*** Abbrev
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x a +"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a l"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a C-a"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a g"))    ;; add-global-abbrev
(global-unset-key (kbd "C-x a -"))    ;; inverse-add-global-abbrev

(global-unset-key (kbd "M-/"))    ;; abbrev-expand
(global-unset-key (kbd "C-x '"))    ;; expand-abbrev
(global-unset-key (kbd "C-x a '"))    ;; expand-abbrev
(global-unset-key (kbd "C-x a e"))    ;; expand-abbrev
(global-unset-key (kbd "C-x a n"))    ;; expand-jump-to-next-slot
(global-unset-key (kbd "C-x a p"))    ;; expand-jump-to-previous-slot

(global-unset-key (kbd "C-x a i l"))    ;; inverse-add-mode-abbrev
(global-unset-key (kbd "C-x a i g"))    ;; inverse-add-global-abbrev

(global-unset-key (kbd "C-M-/"))    ;; dabbrev-completion
#+END_SRC

*** Highlighting
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'hi-map)
(global-set-key (kbd "M-m") 'hi-map)
#+END_SRC

**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-s h ."))    ;; hightlight-symbol-at-point
(global-unset-key (kbd "M-s h p"))    ;; highlight-phrase
(global-unset-key (kbd "M-s h r"))    ;; highlight-regexp
(global-unset-key (kbd "M-s h u"))    ;; unhighlight-regexp
(global-unset-key (kbd "M-s h l"))    ;; highlight-lines-matching-regexp
(global-unset-key (kbd "M-s h f"))    ;; hi-lock-find-patterns
(global-unset-key (kbd "M-s h w"))    ;; hi-lock-write-interactive-patterns
#+END_SRC

**** Binded
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-m h") 'highlight-symbol-at-point)
(global-set-key (kbd "M-m p") 'highlight-phrase)
(global-set-key (kbd "M-m x") 'highlight-regexp)
(global-set-key (kbd "M-m u") 'unhighlight-regexp)
(global-set-key (kbd "M-m l") 'highlight-lines-matching-regexp)
#+END_SRC

*** Mail
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x m"))    ;; compose-mail
#+END_SRC

*** Language and Coding System
**** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x RET C-\\"))    ;; set-input-method
(global-unset-key (kbd "C-x RET F"))    ;; set-file-name-coding-system
(global-unset-key (kbd "C-x RET X"))    ;; set-next-selection-coding-system
(global-unset-key (kbd "C-x RET c"))    ;; universal-coding-system-argument
(global-unset-key (kbd "C-x RET f"))    ;; set-buffer-file-coding-system
(global-unset-key (kbd "C-x RET k"))    ;; set-keyboard-coding-system
(global-unset-key (kbd "C-x RET l"))    ;; set-language-environment
(global-unset-key (kbd "C-x RET p"))    ;; set-buffer-process-coding-system
(global-unset-key (kbd "C-x RET r"))    ;; revert-buffer-with-coding-system
(global-unset-key (kbd "C-x RET t"))    ;; set-terminal-coding-system
(global-unset-key (kbd "C-x RET x"))    ;; set-selection-coding-system
#+END_SRC

*** Other
**** Unbinded
***** Prefixes
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x *"))    ;; calc-dispatch
(global-unset-key (kbd "C-x 4"))    ;; ctrl-x-4-prefix
(global-unset-key (kbd "C-x 5"))    ;; ctrl-x-5-prefix
(global-unset-key (kbd "C-x 6"))    ;; 2C-command
(global-unset-key (kbd "C-x C-k"))    ;; kmacro-keymap
(global-unset-key (kbd "C-x v"))    ;; vc-prefix-map
#+END_SRC

***** Scaling
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-+"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C--"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C-0"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C-="))    ;; text-scale-adjust
(global-unset-key (kbd "C-<wheel-up>"))    ;; mouse-wheel-text-scale
(global-unset-key (kbd "C-<wheel-down>"))    ;; mouse-wheel-text-scale
#+END_SRC

***** Super Sex
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-@"))    ;; mark-sexp
(global-unset-key (kbd "C-M-SPC"))    ;; mark-sexp
#+END_SRC

***** Lists
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-d"))    ;; down-list
(global-unset-key (kbd "ESC C-<down>"))    ;; down-list

(global-unset-key (kbd "C-M-n"))    ;; forward-list
(global-unset-key (kbd "C-M-p"))    ;; backward-list
(global-unset-key (kbd "C-M-u"))    ;; backward-up-list

(global-unset-key (kbd "C-M-<up>"))    ;; backward-up-list
(global-unset-key (kbd "ESC C-<up>"))    ;; backward-up-list
#+END_SRC

***** Secondary Mouse
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<down-mouse-1>"))    ;; mouse-drag-secondary
(global-unset-key (kbd "M-<drag-mouse-1>"))    ;; mouse-set-secondary
(global-unset-key (kbd "M-<mouse-1>"))    ;; mouse-start-secondary
(global-unset-key (kbd "M-<mouse-2>"))    ;; mouse-yank-secondary
(global-unset-key (kbd "M-<mouse-3>"))    ;; mouse-secondary-save-then-kill
#+END_SRC

***** Menus
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-`"))    ;; tmm-menubar
(global-unset-key (kbd "S-<f10>"))    ;; context-menu-open
(global-unset-key (kbd "C-<f10>"))    ;; buffer-menu-open
(global-unset-key (kbd "C-<down-mouse-2>"))    ;; facemenu-menu
(global-unset-key (kbd "S-<down-mouse-1>"))    ;; mouse-appearance-menu
(global-unset-key (kbd "C-<down-mouse-1>"))    ;; mouse-buffer-menu
#+END_SRC

***** Commando
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-!"))    ;; shell-command
(global-unset-key (kbd "M-&"))    ;; async-shell-command
(global-unset-key (kbd "M-|"))    ;; shell-command-on-region
(global-unset-key (kbd "M-X"))    ;; execute-extended-command-for-buffer
#+END_SRC

***** Other
****** Evaluation
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-:"))    ;; eval-expression
(global-unset-key (kbd "C-x C-e"))    ;; eval-last-sexp
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-@"))    ;; set-mark-command
(global-unset-key (kbd "M-~"))    ;; not-modified
(global-unset-key (kbd "C-x f"))    ;; set-fill-column
(global-unset-key (kbd "C-x ."))    ;; set-fill-prefix
(global-unset-key (kbd "C-x C-n"))    ;; set-goal-column
(global-unset-key (kbd "C-x $"))    ;; set-selective-display
(global-unset-key (kbd "C-x ="))    ;; what-cursor-position
(global-unset-key (kbd "C-x ;"))    ;; comment-set-column
#+END_SRC

** Local
*** Major Mode
**** CC Mode
***** C Lang
#+BEGIN_SRC emacs-lisp

#+END_SRC

* Hooks
#+BEGIN_SRC emacs-lisp
;;(add-hook 'c-initialization-hook
;;		  )

;;(add-hook 'c-mode-common-hook
;;		  )
#+END_SRC

** C Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook
		  'c-mode-settings
		  )
#+END_SRC

** C++ Mode
#+BEGIN_SRC emacs-lisp
;;(add-hook 'c++-mode-hook
;;		  )
#+END_SRC

** Obj-C Mode
#+BEGIN_SRC emacs-lisp
;;(add-hook 'objc-mode-hook
;;		  )
#+END_SRC

** Java Mode
#+BEGIN_SRC emacs-lisp
;;(add-hook 'java-mode-hook
;;		  )
#+END_SRC

** Idl Mode
#+BEGIN_SRC emacs-lisp
;;(add-hook 'idl-mode-hook
;;		  )
#+END_SRC

** Pike Mode
#+BEGIN_SRC emacs-lisp
;;(add-hook 'pike-mode-hook
;;		  )
#+END_SRC

** Awk Mode
#+BEGIN_SRC emacs-lisp
;;(add-hook 'awk-mode-hook
;;		  )
#+END_SRC

* Abbreviations
#+BEGIN_SRC emacs-lisp

#+END_SRC

* Other
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(gruvbox-dark-medium))
 '(custom-safe-themes
 '("b1a691bb67bd8bd85b76998caf2386c9a7b2ac98a116534071364ed6489b695d" "fa49766f2acb82e0097e7512ae4a1d6f4af4d6f4655a48170d0a00bcb7183970" "3e374bb5eb46eb59dbd92578cae54b16de138bc2e8a31a2451bf6fdb0f3fd81b" "19a2c0b92a6aa1580f1be2deb7b8a8e3a4857b6c6ccf522d00547878837267e7" "2ff9ac386eac4dffd77a33e93b0c8236bb376c5a5df62e36d4bfa821d56e4e20" "72ed8b6bffe0bfa8d097810649fd57d2b598deef47c992920aef8b5d9599eefe" "d80952c58cf1b06d936b1392c38230b74ae1a2a6729594770762dc0779ac66b7" default))
 '(package-selected-packages
 '(toc-org csharp-mode yascroll vimrc-mode elcord gruvbox-theme)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC
