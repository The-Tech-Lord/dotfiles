#+TITLE: TMP16A4's Emacs Config
#+DATE: 6/19/2023
#+AUTHOR: The Programming M16A4
#+STARTUP: showall
#+PROPERTY: header-args:emacs-lisp :tangle yes :tangle init.el

*  _______ _____  __  __ __   __        _  _   _       ______                             _____             __ _       
* |__   __|  __ \|  \/  /_ | / /    /\ | || | ( )     |  ____|                           / ____|           / _(_)      
*    | |  | |__) | \  / || |/ /_   /  \| || |_|/ ___  | |__   _ __ ___   __ _  ___ ___  | |     ___  _ __ | |_ _  __ _ 
*    | |  |  ___/| |\/| || | '_ \ / /\ \__   _| / __| |  __| | '_ ` _ \ / _` |/ __/ __| | |    / _ \| '_ \|  _| |/ _` |
*    | |  | |    | |  | || | (_) / ____ \ | |   \__ \ | |____| | | | | | (_| | (__\__ \ | |___| (_) | | | | | | | (_| |
*    |_|  |_|    |_|  |_||_|\___/_/    \_\|_|   |___/ |______|_| |_| |_|\__,_|\___|___/  \_____\___/|_| |_|_| |_|\__, |
*                                                                                                                 __/ |
*                                                                                                                |___/ 

"I'm an organization junkie" - Tsudo

GitHub: https://github.com/The-Tech-Lord/dotfiles

* Packages
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

* Settings
** Emacs Settings
*** Startup Screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)                     ;; Startup Screen
#+END_SRC

*** User Interface
**** General
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

**** Line Number Column
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
(global-display-line-numbers-mode)
#+END_SRC

*** Whitespace Mode
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Tab Space
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode t)
(setq backward-delete-char-untabify-method nil)
#+END_SRC

*** Git
The plan here is that when a git window is opened, it won't display the line numbers.
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Other
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq-default fill-column 150)
#+END_SRC

** Custom Settings
*** Variables
Convenience:
- toc-org: Table of Contents creator
Modes:
- csharp-mode: Major mode for C#
- vimrc-mode: Major mode for vimrc configuration files
Themes:
- gruvbox-theme
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(custom-enabled-themes '(gruvbox-dark-medium))
 '(custom-safe-themes
 '("b1a691bb67bd8bd85b76998caf2386c9a7b2ac98a116534071364ed6489b695d" "fa49766f2acb82e0097e7512ae4a1d6f4af4d6f4655a48170d0a00bcb7183970" "3e374bb5eb46eb59dbd92578cae54b16de138bc2e8a31a2451bf6fdb0f3fd81b" "19a2c0b92a6aa1580f1be2deb7b8a8e3a4857b6c6ccf522d00547878837267e7" "2ff9ac386eac4dffd77a33e93b0c8236bb376c5a5df62e36d4bfa821d56e4e20" "72ed8b6bffe0bfa8d097810649fd57d2b598deef47c992920aef8b5d9599eefe" "d80952c58cf1b06d936b1392c38230b74ae1a2a6729594770762dc0779ac66b7" default))
 '(package-selected-packages
   '(toc-org csharp-mode vimrc-mode gruvbox-theme)
   )
 )
#+END_SRC

*** Faces
#+BEGIN_SRC emacs-lisp
(custom-set-faces
   )
#+END_SRC

** Mode Settings
*** Major Mode
**** CC Mode
#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux")    ;; Makes curly braces format how they're supposed to
#+END_SRC

***** C
#+BEGIN_SRC emacs-lisp
(defun c-mode-settings()
  (setq c-basic-offset 4)
  )
#+END_SRC

***** C++
#+BEGIN_SRC emacs-lisp
(defun cpp-mode-settings()
  )
#+END_SRC

***** Obj-C
#+BEGIN_SRC emacs-lisp
(defun objc-mode-settings()
  )
#+END_SRC

***** Java
#+BEGIN_SRC emacs-lisp
(defun java-mode-settings()
  )
#+END_SRC

***** Idl
#+BEGIN_SRC emacs-lisp
(defun idl-mode-settings()
  )
#+END_SRC

***** Pike
#+BEGIN_SRC emacs-lisp
(defun pike-mode-settings()
  )
#+END_SRC

***** Awk
#+BEGIN_SRC emacs-lisp
(defun awk-mode-settings()
  )
#+END_SRC

**** Monty Python
#+BEGIN_SRC emacs-lisp
(defun python-mode-settings()
  )
#+END_SRC

**** Microsoft Java
#+BEGIN_SRC emacs-lisp
(defun cs-mode-settings()
  )
#+END_SRC

**** Hexl Mode
#+BEGIN_SRC emacs-lisp
(defun hexl-mode-settings()
  )
#+END_SRC

**** Org Mode
***** ToDo
****** Keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
		'((sequence "TODO" "IN-PROGRESS" "NEAR-COMP" "|" "DONE")
		  (sequence "BUG" "MINOR" "MAJOR" "|" "FIXED" "HOTFIX")
		  (sequence "Heh")))
#+END_SRC

****** Faces
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
	  '(("TODO" . org-warning) ("IN-PROGRESS" . "yellow") ("NEAR-COMP" . "orange") ("DONE" . "green")
		("BUG" . org-warning) ("FIXED" . "green")))
#+END_SRC

***** SRC Block
****** Indentation
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
(setq org-edit-src-content-indentation '0)
#+END_SRC

* Bindings
** Decodes
Credit:
https://emacs.stackexchange.com/questions/10271/how-to-bind-c-for-real-seriously-for-real-this-time
https://emacs.stackexchange.com/questions/220/how-to-bind-c-i-as-different-from-tab
#+BEGIN_SRC emacs-lisp
(define-key input-decode-map [?\C-i] [C-i])    ;; TAB
(define-key input-decode-map [?\C-m] [C-m])    ;; RET
(define-key input-decode-map [?\C-\[] (kbd "<C-[>"))    ;; ESC
#+END_SRC

** Global
*** Essentials
**** Movement
***** Unbinding
****** Basic
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-f"))    ;; forward-char
(global-unset-key (kbd "C-b"))    ;; backward-char
(global-unset-key (kbd "C-n"))    ;; next-line
(global-unset-key (kbd "C-p"))    ;; previous-line
#+END_SRC

****** Chunks
******* Words
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-f"))    ;; forward-word
(global-unset-key (kbd "M-b"))    ;; backward-word
(global-unset-key (kbd "ESC <left>"))    ;; backward-word
#+END_SRC

******* Sentences
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-a"))    ;; backward-sentence
(global-unset-key (kbd "M-e"))    ;; forward-sentence
#+END_SRC

******* Moisty
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-f"))    ;; forward-sexp
(global-unset-key (kbd "C-M-<right>"))    ;; forward-sexp
(global-unset-key (kbd "ESC C-<left>"))    ;; backward-sexp
(global-unset-key (kbd "ESC C-<right>"))    ;; forward-sexp
(global-unset-key (kbd "C-M-b"))    ;; backward-sexp
(global-unset-key (kbd "C-M-<left>"))    ;; backward-sexp
#+END_SRC

******* Pages
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x ["))    ;; backward-page
(global-unset-key (kbd "C-x ]"))    ;; forward-page
#+END_SRC

******* Defun
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-a"))    ;; beginning-of-defun
(global-unset-key (kbd "C-M-<home>"))    ;; beginning-of-defun
(global-unset-key (kbd "ESC C-<home>"))    ;; beginning-of-defun
(global-unset-key (kbd "C-M-e"))    ;; end-of-defun
(global-unset-key (kbd "C-M-<end>"))    ;; end-of-defun
(global-unset-key (kbd "ESC C-<end>"))    ;; end-of-defun
#+END_SRC

****** Whitespace
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-m"))    ;; back-to-indentation
(global-unset-key (kbd "M-i"))    ;; tab-to-tab-stop
#+END_SRC

****** Scrolling
******* Basic
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-v"))    ;; scroll-up-command
(global-unset-key (kbd "M-v"))    ;; scroll-down-command
#+END_SRC

******* Begend
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<"))    ;; beginning-of-buffer
(global-unset-key (kbd "C-<home>"))    ;; beginning-of-buffer
(global-unset-key (kbd "M->"))    ;; end-of-buffer
(global-unset-key (kbd "C-<end>"))    ;; end-of-buffer
#+END_SRC

******* Other Window
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-v"))    ;; scroll-other-window
(global-unset-key (kbd "M-<next>"))    ;; scroll-other-window
(global-unset-key (kbd "ESC <next>"))    ;; scroll-other-window
(global-unset-key (kbd "C-M-S-v"))    ;; scroll-other-window-down
(global-unset-key (kbd "M-<prior>"))    ;; scroll-other-window-down
(global-unset-key (kbd "ESC <prior>"))    ;; scroll-other-window-down
#+END_SRC

******** Begend
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<home>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "M-<begin>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "ESC <home>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "ESC <begin>"))    ;; beginning-of-buffer-other-window
(global-unset-key (kbd "M-<end>"))    ;; end-of-buffer-other-window
(global-unset-key (kbd "ESC <end>"))    ;; end-of-buffer-other-window
#+END_SRC

******** Alignment
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-S-l"))    ;; recenter-other-window
#+END_SRC

******* Sideways
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x <"))    ;; scroll-left
(global-unset-key (kbd "C-<next>"))    ;; scroll-left
(global-unset-key (kbd "C-x >"))    ;; scroll-right
(global-unset-key (kbd "C-<prior>"))    ;; scroll-right
#+END_SRC

******* MWheel
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<wheel-up>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-up>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-down>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-left>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-down>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-left>"))    ;; mwheel-scroll
(global-unset-key (kbd "M-<wheel-right>"))    ;; mwheel-scroll
(global-unset-key (kbd "S-<wheel-right>"))    ;; mwheel-scroll
#+END_SRC

****** Lists
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-d"))    ;; down-list
(global-unset-key (kbd "C-M-<down>"))    ;; down-list
(global-unset-key (kbd "ESC C-<down>"))    ;; down-list
(global-unset-key (kbd "C-M-n"))    ;; forward-list
(global-unset-key (kbd "C-M-p"))    ;; backward-list
(global-unset-key (kbd "C-M-u"))    ;; backward-up-list
(global-unset-key (kbd "C-M-<up>"))    ;; backward-up-list
(global-unset-key (kbd "ESC C-<up>"))    ;; backward-up-list
#+END_SRC

****** Alignment
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-r"))    ;; move-to-window-line-top-bottom
(global-unset-key (kbd "C-l"))    ;; recenter-top-bottom
(global-unset-key (kbd "C-M-l"))    ;; reposition-window
#+END_SRC

****** Goto
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-g c"))    ;; goto-char
(global-unset-key (kbd "M-g g"))    ;; goto-line
(global-unset-key (kbd "M-g M-g"))    ;; goto-line
(global-unset-key (kbd "C-x n g"))    ;; goto-line-relative
#+END_SRC

****** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-g TAB"))    ;; move-to-column
(global-unset-key (kbd "<Scroll Lock>"))    ;; scroll-lock-mode
#+END_SRC

***** Binding
****** Whitespace
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-a") 'back-to-indentation)
#+END_SRC

****** Scrolling
******* Begend
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<prior>") 'beginning-of-buffer)
(global-set-key (kbd "C-<next>") 'end-of-buffer)
#+END_SRC

**** Killing
***** Unbinded
****** Kill Ring
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-w"))    ;; kill-ring-save
(global-unset-key (kbd "C-<insert>"))    ;; kill-ring-save
(global-unset-key (kbd "C-<insertchar>"))    ;; kill-ring-save
(global-unset-key (kbd "C-M-w"))    ;; append-next-kill
#+END_SRC

****** Region
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-w"))    ;; kill-region
(global-unset-key (kbd "S-<delete>"))    ;; kill-region
#+END_SRC

****** Chunks
******* Words
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-d"))    ;; kill-word
(global-unset-key (kbd "C-<delete>"))    ;; kill-word
(global-unset-key (kbd "M-DEL"))    ;; backward-kill-word
(global-unset-key (kbd "C-<backspace>"))    ;; backward-kill-word
#+END_SRC

******* Straights
I called this header "Straights" because it allowed me to be more inclusive of commands that involved sentences and one's that involved lines.
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-k"))    ;; kill-sentence
(global-unset-key (kbd "C-DEL"))    ;; backward-kill-sentence
(global-unset-key (kbd "C-x DEL"))    ;; backward-kill-sentence
(global-unset-key (kbd "C-S-<backspace>"))    ;; kill-whole-line
(global-unset-key (kbd "M-z"))    ;; zap-to-char
#+END_SRC

******* Moisty
I named this after a phrase by MoistCr1TiKaL where he said "Hey!, Sex?". I decided to rename this header as "Moisty" as it'll encompase the hilarity
of his content and also the original "Hey. Sex?" thing was bothering me.
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-k"))    ;; kill-sexp
(global-unset-key (kbd "ESC C-<delete>"))    ;; backward-kill-sexp
(global-unset-key (kbd "ESC C-<backspace>"))    ;; backward-kill-sexp
#+END_SRC

****** Pacifist
This header basically refers to commands that don't "kill" text, hence "Pacifist."
******* Yank
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-y"))    ;; yank
(global-unset-key (kbd "S-<insert>"))    ;; yank
(global-unset-key (kbd "S-<insertchar>"))    ;; yank
#+END_SRC

******* Undo
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-_"))    ;; undo
(global-unset-key (kbd "C-x u"))    ;; undo
(global-unset-key (kbd "C-M-_"))    ;; undo-redo
#+END_SRC

******* Deletion
******** Basic
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-d"))    ;; delete-char
#+END_SRC

******** Whitespace
- just-one-space is similar to delete-horizontal-space, but it ensures that one space is separating two words.
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-^"))    ;; delete-indentation
(global-unset-key (kbd "M-\\"))    ;; delete-horizontal-space
(global-unset-key (kbd "C-x C-o"))    ;; delete-blank-lines
(global-unset-key (kbd "M-SPC"))    ;; just-one-space
#+END_SRC

****** Secondary Mouse
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<down-mouse-1>"))    ;; mouse-drag-secondary
(global-unset-key (kbd "M-<drag-mouse-1>"))    ;; mouse-set-secondary
(global-unset-key (kbd "M-<mouse-1>"))    ;; mouse-start-secondary
(global-unset-key (kbd "M-<mouse-2>"))    ;; mouse-yank-secondary
(global-unset-key (kbd "M-<mouse-3>"))    ;; mouse-secondary-save-then-kill
#+END_SRC

***** Binded
****** Kill Ring
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-'") 'kill-ring-save)
#+END_SRC

****** Region
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-.") 'kill-region)
#+END_SRC

****** Pacifist
******* Yank
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") 'yank)
#+END_SRC

******* Deletion
******** Whitespace
#+BEGIN_SRC emacs-lisp

#+END_SRC

**** Marking
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'mark-prfx)
(global-set-key (kbd "M-SPC") 'mark-prfx)
#+END_SRC

***** Unbinded
****** Setting
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-@"))    ;; set-mark-command
(global-unset-key (kbd "C-x C-x"))    ;; exchange-point-and-mark
#+END_SRC

****** Chunks
******* General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-@"))    ;; mark-word
(global-unset-key (kbd "C-M-h"))    ;; mark-defun
(global-unset-key (kbd "C-x h"))    ;; mark-whole-buffer
(global-unset-key (kbd "C-x C-p"))    ;; mark-page
#+END_SRC

******* Moisty
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-@"))    ;; mark-sexp
(global-unset-key (kbd "C-M-SPC"))    ;; mark-sexp
#+END_SRC

****** Popping
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-,"))    ;; xref-pop-marker-stack
(global-unset-key (kbd "C-x C-@"))    ;; pop-global-mark
(global-unset-key (kbd "C-x C-SPC"))    ;; pop-global-mark
#+END_SRC

***** Binded
****** Setting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-SPC M-SPC") 'exchange-point-and-mark)
#+END_SRC

****** Chunks
******* General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-SPC w") 'mark-word)
(global-set-key (kbd "M-SPC d") 'mark-defun)
(global-set-key (kbd "M-SPC C-a") 'mark-whole-buffer)
#+END_SRC

******* Expressions
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-SPC s") 'mark-sexp)
#+END_SRC

****** Popping
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-SPC x") 'xref-pop-marker-stack)
(global-set-key (kbd "M-SPC p") 'pop-global-mark)
#+END_SRC

**** Rectangles
I went with the cursed combination of M-, as I felt that it was easier to use than M-r (the previous setting). It also made more sense to me as I felt
that it was similar to Marking and having it nearby was able to let me organize the commands on the keyboard.
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'rect-prfx)
(global-set-key (kbd "M-,") 'rect-prfx)
#+END_SRC

***** Unbinded
****** Setting
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x SPC"))    ;; rectangle-mark-mode
#+END_SRC

****** Clipboard
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r y"))    ;; yank-rectangle
(global-unset-key (kbd "C-x r k"))    ;; kill-rectangle
#+END_SRC

****** Utilization
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r c"))    ;; clear-rectangle
(global-unset-key (kbd "C-x r o"))    ;; open-rectangle
(global-unset-key (kbd "C-x r t"))    ;; string-rectangle
(global-unset-key (kbd "C-x r d"))    ;; delete-rectangle
#+END_SRC

****** ExTra ExTra
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r N"))    ;; rectangle-number-lines
(global-unset-key (kbd "C-x r r"))    ;; copy-rectangle-to-register
#+END_SRC

***** Binded
****** Setting
I went with this configuration since M-SPC was being used for Marking and C-SPC was already being used for the default Marking command, so using a
combination of M and C felt better to use rather than C-x SPC (I'd be able to enter Rectangle Mode with just one hand).
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-SPC") 'rectangle-mark-mode)
#+END_SRC

****** Clipboard
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-, ;") 'yank-rectangle)
(global-set-key (kbd "M-, .") 'kill-rectangle)
#+END_SRC

****** Utilization
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-, c") 'clear-rectangle)
(global-set-key (kbd "M-, o") 'open-rectangle)
(global-set-key (kbd "M-, s") 'string-rectangle)
(global-set-key (kbd "M-, d") 'delete-rectangle)
#+END_SRC

****** ExTra ExTra
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-, R") 'copy-rectangle-to-register)
#+END_SRC

**** Searching
I would like to go with C-s, but that was taken by isearch-forward already. Tried to remap it but the command already had some specifics to it that
wouldn't allow rebinding a practical possibility.
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'search-prfx)
(global-set-key (kbd "M-s") 'search-prfx)
#+END_SRC

***** Unbinded
****** Files
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-v"))    ;; find-alternate-file
(global-unset-key (kbd "C-x C-r"))    ;; find-file-read-only
#+END_SRC

****** Xref
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-."))    ;; xref-find-definitions
(global-unset-key (kbd "M-?"))    ;; xref-find-references
(global-unset-key (kbd "C-M-."))    ;; xref-find-apropos
#+END_SRC

****** Regexp
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-r"))    ;; isearch-backward-regexp
(global-unset-key (kbd "C-M-s"))    ;; isearch-forward-regexp
#+END_SRC

****** Replace
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-%"))    ;; query-replace
(global-unset-key (kbd "C-M-%"))    ;; query-replace-regexp
#+END_SRC

***** Binded
****** Files
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-s C-f") 'find-alternate-file)
#+END_SRC

****** Xref
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-s ?") 'xref-find-definitions)
(global-set-key (kbd "M-s C-?") 'xref-find-references)
#+END_SRC

****** Replace
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-s r") 'query-replace)
(global-set-key (kbd "M-s R") 'query-replace-regexp)
#+END_SRC

**** Highlighting
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'hi-prfx)
(global-set-key (kbd "M-p") 'hi-prfx)
#+END_SRC

***** Unbinded
****** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-s h ."))    ;; highlight-symbol-at-point
(global-unset-key (kbd "M-s h p"))    ;; highlight-phrase
#+END_SRC

****** Regexp
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-s h r"))    ;; highlight-regexp
(global-unset-key (kbd "M-s h l"))    ;; highlight-lines-matching-regexp
(global-unset-key (kbd "M-s h u"))    ;; unhighlight-regexp
#+END_SRC

****** Hi-Lock
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-s h f"))    ;; hi-lock-find-patterns
(global-unset-key (kbd "M-s h w"))    ;; hi-lock-write-interactive-patterns
#+END_SRC

***** Binded
****** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p h") 'highlight-symbol-at-point)
(global-set-key (kbd "M-p p") 'highlight-phrase)
#+END_SRC

****** Regexp
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p x") 'highlight-regexp)
(global-set-key (kbd "M-p l") 'highlight-lines-matching-regexp)
(global-set-key (kbd "M-p u") 'unhighlight-regexp)
#+END_SRC

**** Manipulation
Commands here manipulate the style of the text (e.g., Cases) and the position of the text (e.g., Transposing, Splitting). Setting up this header was
one of the harder one's to try and categorize as I had trouble of what would belong here as a lot of commands do some sort of "manipulation" of text.

***** Unbinding
****** Straights
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-o"))    ;; split-line
#+END_SRC

****** Transposing
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-t"))    ;; transpose-chars
(global-unset-key (kbd "M-t"))    ;; transpose-words
(global-unset-key (kbd "C-x C-t"))    ;; transpose-lines
#+END_SRC

****** Cases
******* Words
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-l"))    ;; downcase-word
(global-unset-key (kbd "M-u"))    ;; upcase-word
(global-unset-key (kbd "M-c"))    ;; capitalize-word
#+END_SRC

******* Regions
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-l"))    ;; downcase-region
(global-unset-key (kbd "C-x C-u"))    ;; upcase-region
#+END_SRC

***** Binding
****** Transposing
Idea for better implementation: Create a minor mode for these little shits
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-r") 'transpose-chars)
(global-set-key (kbd "C-x C-t") 'transpose-words)
(global-set-key (kbd "C-x C-y") 'transpose-lines)
(global-set-key (kbd "C-x C-u") 'transpose-sentences)
#+END_SRC

**** Indenting
***** Unbinded
****** Newline
Even though the GNU Emacs manual states that M-j and C-M-j are mapped to comment-indent-new-line, default-indent-new-line can deliver the same features.
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-j"))    ;; default-indent-new-line
(global-unset-key (kbd "C-M-j"))    ;; default-indent-new-line
#+END_SRC

****** Formatting
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x TAB"))    ;; indent-rigidly
(global-unset-key (kbd "C-M-\\"))    ;; indent-region
(global-unset-key (kbd "M-)"))    ;; move-past-close-and-reindent
#+END_SRC

***** Binded
****** Newline
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Formatting
#+BEGIN_SRC emacs-lisp

#+END_SRC

**** Comments
***** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x ;"))    ;; comment-set-column
(global-unset-key (kbd "M-;"))    ;; comment-dwim
#+END_SRC

**** Other
***** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-d"))    ;; list-directory
#+END_SRC

*** Display Management
**** Frames
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'frames-prfx)
(global-set-key (kbd "C-f") 'frames-prfx)
#+END_SRC

***** Unbinded
****** Management
******* Adjustment
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<f10>"))    ;; toggle-frame-maximized
(global-unset-key (kbd "ESC <f10>"))    ;; toggle-frame-maximized
#+END_SRC

******* Creation
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 2"))    ;; make-frame-command
(global-unset-key (kbd "C-x 5 c"))    ;; clone-frame
#+END_SRC

******* Deletion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 0"))    ;; delete-frame
(global-unset-key (kbd "C-x 5 1"))    ;; delete-other-frames
#+END_SRC

******* Suspend
#+BEGIN_SRC emacs-lisp
;; (global-unset-key (kbd "C-z"))    ;; suspend-frame
;; (global-unset-key (kbd "C-x z"))    ;; suspend-frame
;; (global-unset-key (kbd "C-x C-z"))    ;; suspend-frame
#+END_SRC

****** Other Frame
******* General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 5"))    ;; other-frame-prefix
(global-unset-key (kbd "C-x 5 C-o"))    ;; display-buffer-other-frame
(global-unset-key (kbd "C-x 5 m"))    ;; compose-mail-other-frame
(global-unset-key (kbd "C-x 5 p"))    ;; project-other-frame-command
(global-unset-key (kbd "C-<drag-n-drop>"))    ;; w32-drag-n-drop-other-frame
#+END_SRC

******* Switching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 o"))    ;; other-frame
(global-unset-key (kbd "C-x 5 b"))    ;; switch-to-buffer-other-frame
#+END_SRC

******* Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 5 C-f"))    ;; find-file-other-frame
(global-unset-key (kbd "C-x 5 ."))    ;; xref-find-definitions-other-frame
(global-unset-key (kbd "C-x 5 f"))    ;; find-file-other-frame
(global-unset-key (kbd "C-x 5 r"))    ;; find-file-read-only-other-frame
(global-unset-key (kbd "C-x 5 d"))    ;; dired-other-frame
#+END_SRC

***** Binded
****** Management
******* Creation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f f") 'make-frame-command)
(global-set-key (kbd "C-f F") 'clone-frame)
#+END_SRC

******* Deletion
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f w") 'delete-frame)
(global-set-key (kbd "C-f 1") 'delete-other-frames)
#+END_SRC

****** Other Frame
******* General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f 5") 'other-frame-prefix)
(global-set-key (kbd "C-f C-b") 'display-buffer-other-frame)
#+END_SRC

******* Switching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f o") 'other-frame)
(global-set-key (kbd "C-f b") 'switch-to-buffer-other-frame)
#+END_SRC

******* Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f C-f") 'find-file-other-frame)
(global-set-key (kbd "C-f d") 'dired-other-frame)
#+END_SRC

**** Windows
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
(define-prefix-command 'windows-prfx)
(global-set-key (kbd "C-w") 'windows-prfx)
#+END_SRC

***** Unbinded
****** Management
******* Adjustment
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x +"))    ;; balance-windows
(global-unset-key (kbd "C-x ^"))    ;; enlarge-window
(global-unset-key (kbd "C-x }"))    ;; enlarge-window-horizontally
(global-unset-key (kbd "C-x {"))    ;; shrink-window-horizontally
(global-unset-key (kbd "C-x -"))    ;; shrink-window-if-larger-than-buffer
#+END_SRC

******* Splitting
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 2"))    ;; split-window-below
(global-unset-key (kbd "C-x 3"))    ;; split-window-right
#+END_SRC

******* Deletion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 0"))    ;; delete-window
(global-unset-key (kbd "C-x 1"))    ;; delete-other-windows
(global-unset-key (kbd "C-x 4 0"))    ;; kill-buffer-and-window
#+END_SRC

****** Other Window
******* General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 4"))    ;; other-window-prefix
(global-unset-key (kbd "C-x 4 C-o"))    ;; display-buffer
(global-unset-key (kbd "C-x 4 c"))    ;; clone-indirect-buffer-other-window
(global-unset-key (kbd "C-x 4 a"))    ;; add-change-log-entry-other-window
(global-unset-key (kbd "C-x 4 m"))    ;; compose-mail-other-window
(global-unset-key (kbd "C-x 4 p"))    ;; project-other-window-command
#+END_SRC

******* Switching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x o"))    ;; other-window
(global-unset-key (kbd "C-x 4 b"))    ;; switch-to-buffer-other-window
#+END_SRC

******* Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 C-f"))    ;; find-file-other-window
(global-unset-key (kbd "C-x 4 C-j"))    ;; dired-jump-other-window
(global-unset-key (kbd "C-x 4 ."))    ;; xref-find-definitions-other-window
(global-unset-key (kbd "C-x 4 d"))    ;; dired-other-window
(global-unset-key (kbd "C-x 4 f"))    ;; find-file-other-window
(global-unset-key (kbd "C-x 4 r"))    ;; find-file-read-only-other-window
#+END_SRC

******* Uno Reverse
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 4 1"))    ;; same-window-prefix
#+END_SRC

****** 2C
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<f2>"))    ;; 2C-command
(global-unset-key (kbd "<f2> 2"))    ;; 2C-two-columns
(global-unset-key (kbd "<f2> b"))    ;; 2C-associate-buffer
(global-unset-key (kbd "<f2> s"))    ;; 2C-split
(global-unset-key (kbd "<f2> <f2>"))    ;; 2C-two-columns
(global-unset-key (kbd "C-x 6 2"))    ;; 2C-two-columns
(global-unset-key (kbd "C-x 6 b"))    ;; 2C-associate-buffer
(global-unset-key (kbd "C-x 6 s"))    ;; 2C-split
(global-unset-key (kbd "C-x 6 <f2>"))    ;; 2C-two-columns
#+END_SRC

***** Binded
****** Management
******* Adjustment
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w =") 'balance-windows)
(global-set-key (kbd "C-w <left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-w ^") 'enlarge-window)
(global-set-key (kbd "C-w <right>") 'enlarge-window-horizontally)
#+END_SRC

******* Splitting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w [") 'split-window-below)
(global-set-key (kbd "C-w ]") 'split-window-right)
#+END_SRC

******* Deletion
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w w") 'delete-window)
(global-set-key (kbd "C-w W") 'delete-other-windows)
(global-set-key (kbd "C-w C-w") 'kill-buffer-and-window)
#+END_SRC

****** Other Window
******* General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w b") 'display-buffer)
#+END_SRC

******* Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w C-f") 'find-file-other-window)
(global-set-key (kbd "C-w C-d") 'dired-jump-other-window)
(global-set-key (kbd "C-w B") 'switch-to-buffer-other-window)
(global-set-key (kbd "C-w c") 'clone-indirect-buffer-other-window)
(global-set-key (kbd "C-w d") 'dired-other-window)
#+END_SRC

******* Uno Reverse
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w 4") 'same-window-prefix)
#+END_SRC

**** Buffers
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'buffers-prfx)
(global-set-key (kbd "C-b") 'buffers-prfx)
#+END_SRC

***** Functions
When called, I can continuously press [ or ] to switch between buffers.
#+BEGIN_SRC emacs-lisp
(defun buffer-continous-switch()
  )
#+END_SRC

***** Unbinded
****** Switching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x b"))    ;; switch-to-buffer
(global-unset-key (kbd "C-x <right>"))    ;; next-buffer
(global-unset-key (kbd "C-x C-<right>"))    ;; next-buffer
(global-unset-key (kbd "C-x <left>"))    ;; previous-buffer
(global-unset-key (kbd "C-x C-<left>"))    ;; previous-buffer
#+END_SRC

****** Management
******* General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x s"))    ;; save-some-buffers
(global-unset-key (kbd "C-x C-b"))    ;; list-buffers
(global-unset-key (kbd "C-x C-q"))    ;; read-only-mode
#+END_SRC

******* Creation
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x x n"))    ;; clone-buffer
#+END_SRC

******* Killing
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x k"))    ;; kill-buffer
#+END_SRC

****** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x x g"))    ;; revert-buffer-quick
(global-unset-key (kbd "C-x x r"))    ;; rename-buffer
(global-unset-key (kbd "C-x x u"))    ;; rename-uniquely
(global-unset-key (kbd "C-x x i"))    ;; insert-buffer
#+END_SRC

***** Binded
****** Switching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-b <left>") 'previous-buffer)
(global-set-key (kbd "C-b <right>") 'next-buffer)
#+END_SRC

****** Management
******* General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-b s") 'save-some-buffers)
(global-set-key (kbd "C-b l") 'list-buffers)
#+END_SRC

******* Killing
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-b k") 'kill-buffer)
(global-set-key (kbd "C-b x") 'save-buffers-kill-terminal)
#+END_SRC

**** Tabs
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'tabs-prfx)
(global-set-key (kbd "C-t") 'tabs-prfx)
#+END_SRC

***** Unbinding
****** Management
******* Organize
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t G"))    ;; tab-group
(global-unset-key (kbd "C-x t r"))    ;; tab-rename
#+END_SRC

******* Creation
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t 2"))    ;; tab-new
(global-unset-key (kbd "C-x t n"))    ;; tab-duplicate
#+END_SRC

******* Deletion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t 0"))    ;; tab-close
(global-unset-key (kbd "C-x t 1"))    ;; tab-close-other
#+END_SRC

******* Recover
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t u"))    ;; tab-undo
#+END_SRC

****** Switching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t o"))    ;; tab-next
(global-unset-key (kbd "C-x t O"))    ;; tab-previous
#+END_SRC

****** Movement
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t N"))      ;; tab-new-to
(global-unset-key (kbd "C-x t M"))      ;; tab-move-to
(global-unset-key (kbd "C-x t RET"))    ;; tab-switch
(global-unset-key (kbd "C-x t m"))      ;; tab-move
#+END_SRC

****** Other Tab
******* General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t t"))    ;; other-tab-prefix
(global-unset-key (kbd "C-x t b"))    ;; switch-to-buffer-other-tab
(global-unset-key (kbd "C-x t p"))    ;; project-other-tab-command
#+END_SRC

******* Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x t C-f"))    ;; find-file-other-tab
(global-unset-key (kbd "C-x t f"))      ;; find-file-other-tab
(global-unset-key (kbd "C-x t C-r"))    ;; find-file-read-only-other-tab
(global-unset-key (kbd "C-x t d"))      ;; dired-other-tab
#+END_SRC

***** Binding
****** Management
******* Creation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t t") 'tab-new)
(global-set-key (kbd "C-t D") 'tab-duplicate)
#+END_SRC

******* Deletion
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t w") 'tab-close)
(global-set-key (kbd "C-t W") 'tab-close-other)
#+END_SRC

******* Recover
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t u") 'tab-undo)
#+END_SRC

****** Other Tab
******* General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t p") 'project-other-tab-command)
#+END_SRC

******* Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-t d") 'dired-other-tab)
(global-set-key (kbd "C-t C-f") 'find-file-other-tab)
#+END_SRC

*** Project Management
**** Version Control
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'vcs-prfx)
(global-set-key (kbd "C-v") 'vcs-prfx)
#+END_SRC

***** Unbinding
****** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v d"))    ;; vc-dir
#+END_SRC

****** Initialization
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v i"))    ;; vc-register
#+END_SRC

****** Management
******* Updating
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v v"))    ;; vc-next-action
(global-unset-key (kbd "C-x v +"))    ;; vc-update
(global-unset-key (kbd "C-x v P"))    ;; vc-push
(global-unset-key (kbd "C-x v m"))    ;; vc-merge
(global-unset-key (kbd "C-x v u"))    ;; vc-revert
#+END_SRC

******* Removal
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v G"))    ;; vc-ignore
(global-unset-key (kbd "C-x v x"))    ;; vc-delete-file
#+END_SRC

****** Records
******* Diffs
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v ="))    ;; vc-diff
(global-unset-key (kbd "C-x v D"))    ;; vc-root-diff
(global-unset-key (kbd "C-x v M D"))    ;; vc-diff-mergebase
#+END_SRC

******* Logs
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v l"))    ;; vc-print-log
(global-unset-key (kbd "C-x v L"))    ;; vc-print-root-log
(global-unset-key (kbd "C-x v O"))    ;; vc-log-outgoing
(global-unset-key (kbd "C-x v I"))    ;; vc-log-incoming
(global-unset-key (kbd "C-x v h"))    ;; vc-region-history
(global-unset-key (kbd "C-x v M L"))    ;; vc-log-mergebase
(global-unset-key (kbd "C-x v a"))    ;; vc-annotate
(global-unset-key (kbd "C-x v g"))    ;; vc-annotate
(global-unset-key (kbd "C-x v ~"))    ;; vc-revision-other-window
#+END_SRC

******* Logging
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v s"))    ;; vc-create-tag
(global-unset-key (kbd "C-x v r"))    ;; vc-retrieve-tag
#+END_SRC

****** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x v b"))    ;; vc-switch-backend
#+END_SRC

***** Binding
****** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v d") 'vc-dir)
#+END_SRC

****** Initialization
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v I") 'vc-register)
#+END_SRC

****** Management
******* Updating
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v v") 'vc-next-action)
(global-set-key (kbd "C-v P") 'vc-update)
(global-set-key (kbd "C-v p") 'vc-push)
(global-set-key (kbd "C-v m") 'vc-merge)
(global-set-key (kbd "C-v U") 'vc-revert)
#+END_SRC

******* Removal
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v G") 'vc-ignore)
(global-set-key (kbd "C-v C-x") 'vc-delete-file)
#+END_SRC

****** Records
******* Diffs
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v D") 'vc-diff)
(global-set-key (kbd "C-v C-d") 'vc-root-diff)
#+END_SRC

******* Logs
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v C-p") 'vc-print-log)
(global-set-key (kbd "C-v C-l") 'vc-print-root-log)
(global-set-key (kbd "C-v l") 'vc-log-outgoing)
(global-set-key (kbd "C-v L") 'vc-log-incoming)
(global-set-key (kbd "C-v h") 'vc-region-history)
(global-set-key (kbd "C-v a") 'vc-annotate)
(global-set-key (kbd "C-v ~") 'vc-revision-other-window)
#+END_SRC

******* Logging
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v c") 'vc-create-tag)
(global-set-key (kbd "C-v t") 'vc-retrieve-tag)
#+END_SRC

**** Projects
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'project-prfx)
(global-set-key (kbd "C-p") 'project-prfx)
#+END_SRC

***** Unbinding
****** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p D"))    ;; project-dired
(global-unset-key (kbd "C-x p v"))    ;; project-vc-dir
(global-unset-key (kbd "C-x p b"))    ;; project-switch-to-buffer
(global-unset-key (kbd "C-x p k"))    ;; project-kill-buffers
(global-unset-key (kbd "C-x p p"))    ;; project-switch-project
#+END_SRC

****** Commando
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p s"))    ;; project-shell
(global-unset-key (kbd "C-x p !"))    ;; project-shell-command
(global-unset-key (kbd "C-x p &"))    ;; project-async-shell-command
(global-unset-key (kbd "C-x p e"))    ;; project-eshell
(global-unset-key (kbd "C-x p x"))    ;; project-execute-extended-command
(global-unset-key (kbd "C-x p c"))    ;; project-compile
#+END_SRC

****** Searching
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x p f"))    ;; project-find-file
(global-unset-key (kbd "C-x p g"))    ;; project-find-regexp
(global-unset-key (kbd "C-x p d"))    ;; project-find-dir
(global-unset-key (kbd "C-x p F"))    ;; project-or-external-find-file
(global-unset-key (kbd "C-x p G"))    ;; project-or-external-find-regexp
(global-unset-key (kbd "C-x p r"))    ;; project-query-replace-regexp
#+END_SRC

***** Binding
****** General
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p d") 'project-dired)
(global-set-key (kbd "C-p D") 'project-vc-dir)
(global-set-key (kbd "C-p b") 'project-switch-to-buffer)
(global-set-key (kbd "C-p C-k") 'project-kill-buffers)
(global-set-key (kbd "C-p p") 'project-switch-project)
#+END_SRC

****** Commando
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p s") 'project-shell)
(global-set-key (kbd "C-p S") 'project-shell-command)
(global-set-key (kbd "C-p C-s") 'project-async-shell-command)
(global-set-key (kbd "C-p c") 'project-compile)
(global-set-key (kbd "C-p e") 'project-eshell)
#+END_SRC

****** Searching
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-p C-f") 'project-find-file)
(global-set-key (kbd "C-p g") 'project-find-regexp)
(global-set-key (kbd "C-p d") 'project-find-dir)
(global-set-key (kbd "C-p F") 'project-or-external-find-file)
(global-set-key (kbd "C-p G") 'project-or-external-find-regexp)
(global-set-key (kbd "C-p r") 'project-query-replace-regexp)
#+END_SRC

**** Compilation
***** Unbinded
****** Errors
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x `"))    ;; next-error
(global-unset-key (kbd "M-g M-n"))    ;; next-error
(global-unset-key (kbd "M-g n"))    ;; next-error
(global-unset-key (kbd "M-g M-p"))    ;; previous-error
(global-unset-key (kbd "M-g p"))    ;; previous-error
#+END_SRC

***** Binded
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Quality of Life
**** Abbrev
***** Unbinded
****** Creation
******* Global
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x a g"))    ;; add-global-abbrev
(global-unset-key (kbd "C-x a -"))    ;; inverse-add-global-abbrev
(global-unset-key (kbd "C-x a i g"))    ;; inverse-add-global-abbrev
#+END_SRC

******* Local
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x a +"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a l"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a C-a"))    ;; add-mode-abbrev
(global-unset-key (kbd "C-x a i l"))    ;; inverse-add-mode-abbrev
#+END_SRC

****** Expansion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-/"))    ;; abbrev-expand
(global-unset-key (kbd "C-x '"))    ;; expand-abbrev
(global-unset-key (kbd "C-x a '"))    ;; expand-abbrev
(global-unset-key (kbd "C-x a e"))    ;; expand-abbrev
(global-unset-key (kbd "C-x a n"))    ;; expand-jump-to-next-slot
(global-unset-key (kbd "C-x a p"))    ;; expand-jump-to-previous-slot
#+END_SRC

****** Completion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-/"))    ;; dabbrev-completion
#+END_SRC

***** Binded
****** Creation
******* Global
#+BEGIN_SRC emacs-lisp

#+END_SRC

******* Local
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Expansion
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Completion
#+BEGIN_SRC emacs-lisp

#+END_SRC

**** Registers
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'register-prfx)
(global-set-key (kbd "M-t") 'register-prfx)
#+END_SRC

***** Unbinded
****** Manipulation
******* Storing
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r C-@"))    ;; point-to-register
(global-unset-key (kbd "C-x r C-SPC"))    ;; point-to-register
(global-unset-key (kbd "C-x r SPC"))    ;; point-to-register
(global-unset-key (kbd "C-x r n"))    ;; number-to-register
#+END_SRC

******* Copying
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r s"))    ;; copy-to-register
(global-unset-key (kbd "C-x r x"))    ;; copy-to-register
#+END_SRC

******* Values
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r +"))    ;; increment-register
#+END_SRC

****** Insertion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r g"))    ;; insert-register
(global-unset-key (kbd "C-x r i"))    ;; insert-register
(global-unset-key (kbd "C-x r j"))    ;; jump-to-register
#+END_SRC

****** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r f"))    ;; frameset-to-register
(global-unset-key (kbd "C-x r w"))    ;; window-configuration-to-register
(global-unset-key (kbd "C-x r ESC"))    ;; Prefix Command
#+END_SRC

***** Binded
****** Manipulation
******* Storing
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t n") 'number-to-register)
#+END_SRC

******* Copying
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t x") 'copy-to-register)
#+END_SRC

******* Values
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t +") 'increment-register)
#+END_SRC

****** Insertion
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t i") 'insert-register)
(global-set-key (kbd "M-t j") 'jump-to-register)
#+END_SRC

****** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-t f") 'frameset-to-register)
(global-set-key (kbd "M-t w") 'window-configuration-to-register)
#+END_SRC

**** Macros
***** Unbinded
****** Recording
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x ("))    ;; kmacro-start-macro
(global-unset-key (kbd "C-x C-k s"))    ;; kmacro-start-macro
(global-unset-key (kbd "C-x C-k C-s"))    ;; kmacro-start-macro
(global-unset-key (kbd "<f3>"))    ;; kmacro-start-macro-or-insert-counter
(global-unset-key (kbd "C-x )"))    ;; kmacro-end-macro
(global-unset-key (kbd "C-x e"))    ;; kmacro-end-and-call-macro
(global-unset-key (kbd "<f4>"))    ;; kamcro-end-or-call-macro
(global-unset-key (kbd "S-<mouse-3>"))    ;; kmarcro-end-call-mouse
#+END_SRC

****** Counter
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-k C-a"))    ;; kmacro-add-counter
(global-unset-key (kbd "C-x C-k C-c"))    ;; kmacro-set-counter
(global-unset-key (kbd "C-x C-k TAB"))    ;; kmacro-insert-counter
#+END_SRC

****** Ring
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-k C-l"))    ;; kmacro-call-ring-2nd-repeat
(global-unset-key (kbd "C-x C-k C-n"))    ;; kmacro-cycle-ring-next
(global-unset-key (kbd "C-x C-k C-p"))    ;; kmacro-cycle-ring-previous
(global-unset-key (kbd "C-x C-k C-k"))    ;; kmacro-end-or-call-macro-repeat
(global-unset-key (kbd "C-x C-k C-d"))    ;; kmacro-delete-ring-head
(global-unset-key (kbd "C-x C-k C-t"))    ;; kmacro-swap-ring
#+END_SRC

****** Editing
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-k SPC"))    ;; kmacro-step-edit-macro
(global-unset-key (kbd "C-x C-k RET"))    ;; kmacro-edit-macro
(global-unset-key (kbd "C-x C-k C-e"))    ;; kmacro-edit-macro-repeat
(global-unset-key (kbd "C-x C-k e"))    ;; edit-kbd-macro
(global-unset-key (kbd "C-x C-k l"))    ;; kmacro-edit-lossage
#+END_SRC

****** Sessions
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-k n"))    ;; kmacro-name-last-macro
(global-unset-key (kbd "C-x C-k b"))    ;; kmacro-bind-to-key
#+END_SRC

****** Management
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x q"))    ;; kbd-macro-query
(global-unset-key (kbd "C-x C-k q"))    ;; kbd-macro-query
(global-unset-key (kbd "C-x C-k d"))    ;; kmacro-redisplay
#+END_SRC

****** Utilization
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-k r"))    ;; apply-macro-to-region-lines
(global-unset-key (kbd "C-x C-k C-f"))    ;; kmacro-set-format
#+END_SRC

****** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-k C-v"))    ;; kmacro-view-macro-repeat
(global-unset-key (kbd "C-x C-k x"))    ;; kmacro-to-register
#+END_SRC

**** Bookmarks
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'bookmark-prfx)
(global-set-key (kbd "C-x b") 'bookmark-prfx)
#+END_SRC

***** Unbinded
****** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x r m"))    ;; bookmark-set
(global-unset-key (kbd "C-x r M"))    ;; bookmark-set-no-overwrite
(global-unset-key (kbd "C-x r b"))    ;; bookmark-jump
(global-unset-key (kbd "C-x r l"))    ;; bookmark-bmenu-list
#+END_SRC

**** Insertion
***** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-("))    ;; insert-parentheses
(global-unset-key (kbd "C-x i"))    ;; insert-file
#+END_SRC

**** Completion
***** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-i"))    ;; complete-symbol
#+END_SRC

**** Narrowing
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'narrow-prfx)
(global-set-key (kbd "M-n") 'narrow-prfx)
#+END_SRC

***** Unbinded
****** Chunks
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x n d"))    ;; narrow-to-defun
(global-unset-key (kbd "C-x n n"))    ;; narrow-to-region
(global-unset-key (kbd "C-x n p"))    ;; narrow-to-page
(global-unset-key (kbd "C-x n w"))    ;; widen
#+END_SRC

****** Selective
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x $"))    ;; set-selective-display
#+END_SRC

***** Binded
****** Chunks
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-n d") 'narrow-to-defun)
(global-set-key (kbd "M-n r") 'narrow-to-region)
(global-set-key (kbd "M-n p") 'narrow-to-page)
(global-set-key (kbd "M-n w") 'widen)
#+END_SRC

*** Systems
**** D/Enoding
***** Unbinded
****** Specifics
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x RET F"))    ;; set-file-name-coding-system
(global-unset-key (kbd "C-x RET k"))    ;; set-keyboard-coding-system
(global-unset-key (kbd "C-x RET t"))    ;; set-terminal-coding-system
(global-unset-key (kbd "C-x RET x"))    ;; set-selection-coding-system
#+END_SRC

****** Buffer
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x RET f"))    ;; set-buffer-file-coding-system
(global-unset-key (kbd "C-x RET p"))    ;; set-buffer-process-coding-system
(global-unset-key (kbd "C-x RET r"))    ;; revert-buffer-with-coding-system
#+END_SRC

****** Other
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x RET X"))    ;; set-next-selection-coding-system
(global-unset-key (kbd "C-x RET c"))    ;; universal-coding-system-argument
(global-unset-key (kbd "C-x RET l"))    ;; set-language-environment
(global-unset-key (kbd "C-x RET C-\\"))    ;; set-input-method
#+END_SRC

**** Language
***** Unbinded
****** Grammer
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-$"))    ;; ispell-word
#+END_SRC

****** Insertion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x 8 RET"))    ;; insert-char
(global-unset-key (kbd "C-x \\"))    ;; activate-transient-input-method
#+END_SRC

**** Commando
***** Unbinded
****** Commands
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-!"))    ;; shell-command
(global-unset-key (kbd "M-&"))    ;; async-shell-command
(global-unset-key (kbd "M-|"))    ;; shell-command-on-region
(global-unset-key (kbd "M-X"))    ;; execute-extended-command-for-buffer
(global-unset-key (kbd "C-x M-:"))    ;; repeat-complex-command
(global-unset-key (kbd "C-x ESC ESC"))    ;; repeat-complex-command
#+END_SRC

****** Recursion
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-c"))    ;; exit-recursive-edit
#+END_SRC

****** Evaluation
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-:"))    ;; eval-expression
(global-unset-key (kbd "M-ESC :"))    ;; eval-expression
(global-unset-key (kbd "C-x C-e"))    ;; eval-last-sexp
#+END_SRC

***** Binded
****** Commands
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Recursion
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Evaluation
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Other
**** Help
***** Unbinded
#+BEGIN_SRC emacs-lisp
;; (global-unset-key (kbd "<f1> C-a"))    ;; about-emacs
;; (global-unset-key (kbd "<f1> C-c"))    ;; describe-copying
;; (global-unset-key (kbd "<f1> C-d"))    ;; view-emcas-debugging
;; (global-unset-key (kbd "<f1> C-e"))    ;; view-external-packages
;; (global-unset-key (kbd "<f1> C-f"))    ;; view-emacs-FAQ
;; (global-unset-key (kbd "<f1> C-h"))    ;; help-for-help
;; (global-unset-key (kbd "<f1> RET"))    ;; view-order-manuals
;; (global-unset-key (kbd "<f1> C-n"))    ;; view-emacs-news
;; (global-unset-key (kbd "<f1> C-o"))    ;; describe-distribution
;; (global-unset-key (kbd "<f1> C-p"))    ;; view-emacs-problems
;; (global-unset-key (kbd "<f1> C-s"))    ;; search-forward-help-for-help
;; (global-unset-key (kbd "<f1> C-t"))    ;; view-emacs-todo
;; (global-unset-key (kbd "<f1> C-w"))    ;; describe-no-warranty
;; (global-unset-key (kbd "<f1> C-\\"))    ;; describe-input-method
;; (global-unset-key (kbd "<f1> ."))    ;; display-local-help
;; (global-unset-key (kbd "<f1> 4"))    ;; Prefix Command
;; (global-unset-key (kbd "<f1> ?"))    ;; help-for-help
;; (global-unset-key (kbd "<f1> C"))    ;; describe-coding-system
;; (global-unset-key (kbd "<f1> F"))    ;; Info-goto-emacs-command-code
;; (global-unset-key (kbd "<f1> I"))    ;; describe-input-method
;; (global-unset-key (kbd "<f1> K"))    ;; Info-goto-emacs-key-command-node
;; (global-unset-key (kbd "<f1> L"))    ;; describe-language-environment
;; (global-unset-key (kbd "<f1> P"))    ;; describe-package
;; (global-unset-key (kbd "<f1> R"))    ;; info-display-manual
;; (global-unset-key (kbd "<f1> S"))    ;; info-lookup-symbol
;; (global-unset-key (kbd "<f1> a"))    ;; apropos-command
;; (global-unset-key (kbd "<f1> b"))    ;; describe-bindings
;; (global-unset-key (kbd "<f1> c"))    ;; describe-key-briefly
;; (global-unset-key (kbd "<f1> d"))    ;; apropos-documentation
;; (global-unset-key (kbd "<f1> e"))    ;; view-ech-area-messages
;; (global-unset-key (kbd "<f1> f"))    ;; describe-function
;; (global-unset-key (kbd "<f1> g"))    ;; describe-gnu-project
;; (global-unset-key (kbd "<f1> h"))    ;; view-hello-file
;; (global-unset-key (kbd "<f1> i"))    ;; info
;; (global-unset-key (kbd "<f1> k"))    ;; describe-key
;; (global-unset-key (kbd "<f1> l"))    ;; view-lossage
;; (global-unset-key (kbd "<f1> m"))    ;; describe-mode
;; (global-unset-key (kbd "<f1> n"))    ;; view-emacs-news
;; (global-unset-key (kbd "<f1> o"))    ;; describe-symbol
;; (global-unset-key (kbd "<f1> p"))    ;; finder-by-keyword
;; (global-unset-key (kbd "<f1> q"))    ;; help-quit
;; (global-unset-key (kbd "<f1> r"))    ;; info-emacs-manual
;; (global-unset-key (kbd "<f1> s"))    ;; describe-syntax
;; (global-unset-key (kbd "<f1> t"))    ;; help-with-tutorial
;; (global-unset-key (kbd "<f1> v"))    ;; describe-variable
;; (global-unset-key (kbd "<f1> w"))    ;; where-is
;; (global-unset-key (kbd "<f1> x"))    ;; describe-command
#+END_SRC

**** Menus
***** Unbinded
****** General
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<f10>"))    ;; menu-bar-open
(global-unset-key (kbd "M-`"))    ;; tmm-menubar
(global-unset-key (kbd "S-<f10>"))    ;; context-menu-open
(global-unset-key (kbd "C-<f10>"))    ;; buffer-menu-open
(global-unset-key (kbd "C-<down-mouse-1>"))    ;; mouse-buffer-menu
#+END_SRC

****** Customization
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-<down-mouse-2>"))    ;; facemenu-menu
(global-unset-key (kbd "S-<down-mouse-1>"))    ;; mouse-appearance-menu
#+END_SRC

**** Prefixes
***** Unbinded
Non-user created prefixes
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x *"))    ;; calc-dispatch
(global-unset-key (kbd "C-x 4"))    ;; ctrl-x-4-prefix
(global-unset-key (kbd "C-x 5"))    ;; ctrl-x-5-prefix
(global-unset-key (kbd "C-x 6"))    ;; 2C-command
(global-unset-key (kbd "C-x C-k"))    ;; kmacro-keymap
(global-unset-key (kbd "C-x v"))    ;; vc-prefix-map
#+END_SRC

**** Compensation
***** Functions
#+BEGIN_SRC emacs-lisp
(defun text-scaler()
  )
#+END_SRC

***** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-+"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C--"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C-0"))    ;; text-scale-adjust
(global-unset-key (kbd "C-x C-="))    ;; text-scale-adjust
(global-unset-key (kbd "C-<wheel-up>"))    ;; mouse-wheel-text-scale
(global-unset-key (kbd "C-<wheel-down>"))    ;; mouse-wheel-text-scale
#+END_SRC

***** Binded
#+BEGIN_SRC emacs-lisp

#+END_SRC

**** Informative
***** Unbinded
****** Counting
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-="))    ;; count-words-region
(global-unset-key (kbd "C-x l"))    ;; count-lines-page
#+END_SRC

****** Cursor
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x ="))    ;; what-cursor-position
#+END_SRC

**** Sakura
***** Unbinded
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-<mouse-1>"))    ;; mouse-set-point
(global-unset-key (kbd "M-~"))    ;; not-modified
(global-unset-key (kbd "C-x C-n"))    ;; set-goal-column
(global-unset-key (kbd "C-x x f"))    ;; font-lock-update
(global-unset-key (kbd "C-x x t"))    ;; toggle-truncate-lines
(global-unset-key (kbd "M-ESC ESC"))    ;; keyboard-escape-quit
#+END_SRC

** Local
*** Major Mode
**** CC Mode
***** CC Common
****** Hungry Delete
#+BEGIN_SRC emacs-lisp
(defun cc-hungry-delete()
  (local-unset-key (kbd "C-c DEL"))    ;; c-hungry-delete-backwards
  (local-unset-key (kbd "C-c C-DEL"))    ;; c-hungry-delete-backwards
  (local-unset-key (kbd "C-c C-<backspace>"))    ;; c-hungry-delete-backwards
  (local-unset-key (kbd "C-c C-<delete>"))    ;; c-hungry-delete-forward
  (local-unset-key (kbd "C-c C-<deletechar>"))    ;; c-hungry-delete-forward
  (local-unset-key (kbd "C-c <deletechar>"))    ;; c-hungry-delete-forward
  (local-unset-key (kbd "C-c C-d"))    ;; c-hungry-delete-forward
  (local-set-key (kbd "C-c C-f") 'c-hungry-delete-forward)
  (local-set-key (kbd "C-c C-b") 'c-hungry-delete-backwards)
  )
#+END_SRC

****** Main Function
#+BEGIN_SRC emacs-lisp
(defun cc-common-bindings()
  'cc-hungry-delete
  )
#+END_SRC

***** C Lang
****** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Main Function
#+BEGIN_SRC emacs-lisp
(defun c-mode-bindings()
  )
#+END_SRC

***** C++
****** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Main Function
#+BEGIN_SRC emacs-lisp
(defun cpp-mode-bindings()
  )
#+END_SRC

***** Obj-C
****** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Main Function
#+BEGIN_SRC emacs-lisp
(defun objc-mode-bindings()
  )
#+END_SRC

***** Java
****** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Main Function
#+BEGIN_SRC emacs-lisp
(defun java-mode-bindings()
  )
#+END_SRC

***** Idl
****** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Main Function
#+BEGIN_SRC emacs-lisp
(defun idl-mode-bindings()
  )
#+END_SRC

***** Pike
****** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Main Function
#+BEGIN_SRC emacs-lisp
(defun pike-mode-bindings()
  )
#+END_SRC

***** Awk
****** General
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Main Function
#+BEGIN_SRC emacs-lisp
(defun awk-mode-bindings()
  )
#+END_SRC

**** The Founding Fathers
***** Org Mode
****** Unbinded
******* Todo
#+BEGIN_SRC emacs-lisp

#+END_SRC

******* Narrowing
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Binded
******* ToDo
#+BEGIN_SRC emacs-lisp

#+END_SRC

***** ToDo Mode
****** Unbinded
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Binded
#+BEGIN_SRC emacs-lisp

#+END_SRC

***** RMail
****** Unbinded
******* Composing
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x m"))    ;; compose-mail
#+END_SRC

******* Management
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Binded
******* Composing
#+BEGIN_SRC emacs-lisp

#+END_SRC

******* Management
#+BEGIN_SRC emacs-lisp

#+END_SRC

***** nXML Mode
****** Unbinded
#+BEGIN_SRC emacs-lisp

#+END_SRC

****** Binded
#+BEGIN_SRC emacs-lisp

#+END_SRC

***** Shell Mode
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Minor Mode
**** Auto Fill Mode
***** Unbinded
****** Parameters
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x ."))    ;; set-fill-prefix
(global-unset-key (kbd "C-x f"))    ;; set-fill-column
#+END_SRC

****** Filling
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-q"))    ;; fill-paragraph
#+END_SRC

***** Binded
****** Activation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x a a") 'auto-fill-mode)
#+END_SRC

****** Parameters
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x a .") 'set-fill-prefix)
(global-set-key (kbd "C-x a f") 'set-fill-column)
#+END_SRC

****** Filling
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x a p") 'fill-paragraph)
(global-set-key (kbd "C-x a r") 'fill-region)
(global-set-key (kbd "C-x a P") 'fill-region-as-paragraph)
(global-set-key (kbd "C-x a c") 'center-line)
#+END_SRC

**** Rectangle Mark Mode
***** Unbinded
The plan here is to use association lists to map and unmap keybindings within the minor mode.
****** Utilization
#+BEGIN_SRC emacs-lisp
(defun rect-util-unbind()
  (define-key rectangle-mark-mode-map (kbd "C-o") nil)    ;; open-rectangle
  (define-key rectangle-mark-mode-map (kbd "C-t") nil)    ;; string-rectangle
  )
#+END_SRC

***** Binded
****** Utilization
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Ammusements
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'ammusements-prfx)
(global-set-key (kbd "C-`") 'ammusements-prfx)
#+END_SRC

**** Blackbox
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` b") 'blackbox)
#+END_SRC

**** Mpuz
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` m") 'mpuz)
#+END_SRC

**** Bubbles
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` B") 'bubbles)
#+END_SRC

**** Decipher
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` d") 'decipher)
#+END_SRC

**** Dissociated Press
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` D") 'dissociated-press)
#+END_SRC

**** Dunnet
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` C-d") 'dunnet)
#+END_SRC

**** Gomoku
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` g") 'gomoku)
#+END_SRC

**** Hanoi
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` h") 'hanoi)
#+END_SRC

**** Life
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` l") 'life)
#+END_SRC

**** Morse Region
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` M") 'morse-region)
#+END_SRC

**** Pong
***** Unbinded
****** Controls
#+BEGIN_SRC emacs-lisp
(defun pong-controls-unbind()
  (local-unset-key (kbd "2"))    ;; pong-move-down
  (local-unset-key (kbd "4"))    ;; pong-move-left
  (local-unset-key (kbd "6"))    ;; pong-move-right
  (local-unset-key (kbd "8"))    ;; pong-move-up
  (local-unset-key (kbd "<down>"))    ;; pong-move-down
  (local-unset-key (kbd "<left>"))    ;; pong-move-left
  (local-unset-key (kbd "<right>"))    ;; pong-move-right
  (local-unset-key (kbd "<up>"))    ;; pong-move-up
  )
#+END_SRC

***** Binded
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` p") 'pong)
#+END_SRC

****** Controls
#+BEGIN_SRC emacs-lisp
(defun pong-controls()
  (local-set-key (kbd "w") 'pong-move-left)
  (local-set-key (kbd "s") 'pong-move-right)
  (local-set-key (kbd "o") 'pong-move-up)
  (local-set-key (kbd "l") 'pong-move-down)
  )
#+END_SRC

**** Snake
***** Unbinded
****** Controls
#+BEGIN_SRC emacs-lisp
(defun snake-controls-unbind()
  )
#+END_SRC

***** Binded
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` s") 'snake)
#+END_SRC

****** Controls
#+BEGIN_SRC emacs-lisp
(defun snake-controls()
  )
#+END_SRC

**** Tetris
***** Unbinded
****** Controls
#+BEGIN_SRC emacs-lisp

#+END_SRC

***** Binded
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` t") 'tetris)
#+END_SRC

****** Controls
#+BEGIN_SRC emacs-lisp
(defun tetris-controls()
  )
#+END_SRC

**** Solitaire
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` S") 'solitaire)
#+END_SRC

**** Zone
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` z") 'zone)
#+END_SRC

**** Butterfly
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` C-b") 'butterfly)
#+END_SRC

**** Doctor
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-` C-D") 'doctor)
#+END_SRC

* Modal
A place to define various modes
** Minor Mode
*** Manipulation Mode
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Window Mode
#+BEGIN_SRC emacs-lisp

#+END_SRC

* Hooks
** Development
*** Major Mode
**** CC Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'c-initialization-hook
  		  'cc-common-bindings
		  )
#+END_SRC

***** C
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook
		  'c-mode-settings
		  )
#+END_SRC

***** C++
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook
		  'cpp-mode-settings
		  )
#+END_SRC

***** Obj-C
#+BEGIN_SRC emacs-lisp
(add-hook 'objc-mode-hook
		  'objc-mode-settings
		  )
#+END_SRC

***** Java Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'java-mode-hook
		  'java-mode-settings
		  )
#+END_SRC

***** Idl Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'idl-mode-hook
		  'idl-mode-settings
		  )
#+END_SRC

***** Pike Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'pike-mode-hook
		  'pike-mode-settings
		  )
#+END_SRC

***** Awk Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'awk-mode-hook
		  'awk-mode-settings
		  )
#+END_SRC

**** Python
#+BEGIN_SRC emacs-lisp

#+END_SRC

**** C#
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Minor Mode
**** Hexl
#+BEGIN_SRC emacs-lisp

#+END_SRC

** The Founding Fathers
*** Org Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
		  'turn-on-auto-fill
		  )
#+END_SRC

*** ToDo Mode
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** RMail
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** nXML Mode
#+BEGIN_SRC emacs-lisp

#+END_SRC

** Windows
#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook
		  'toggle-frame-maximized t
		  )
#+END_SRC

** Rectangle
#+BEGIN_SRC emacs-lisp
(add-hook 'rectangle-mark-mode-hook
		  'rect-util-unbind
		  )
#+END_SRC

** Ammusements
*** Pong
#+BEGIN_SRC emacs-lisp

#+END_SRC

